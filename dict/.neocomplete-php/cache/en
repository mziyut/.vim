[{'word': 'zend_version', 'menu': 'Gets the version of the current Zend engine', 'kind': '[f]', 'abbr': 'zend_version()'}, {'word': 'func_num_args', 'menu': 'Returns the number of arguments passed to the function', 'kind': '[f]', 'abbr': 'func_num_args()'}, {'word': 'func_get_arg', 'menu': 'Return an item from the argument list', 'kind': '[f]', 'abbr': 'func_get_arg()'}, {'word': 'func_get_args', 'menu': 'Returns an array comprising a function''s argument list', 'kind': '[f]', 'abbr': 'func_get_args()'}, {'word': 'strlen', 'menu': 'Get string length', 'kind': '[f]', 'abbr': 'strlen()'}, {'word': 'strcmp', 'menu': 'Binary safe string comparison', 'kind': '[f]', 'abbr': 'strcmp()'}, {'word': 'strncmp', 'menu': 'Binary safe string comparison of the first n characters', 'kind': '[f]', 'abbr': 'strncmp()'}, {'word': 'strcasecmp', 'menu': 'Binary safe case-insensitive string comparison', 'kind': '[f]', 'abbr': 'strcasecmp()'}, {'word': 'strncasecmp', 'menu': 'Binary safe case-insensitive string comparison of the first n characters', 'kind': '[f]', 'abbr': 'strncasecmp()'}, {'word': 'each', 'menu': 'Return the current key and value pair from an array and advance the array cursor', 'kind': '[f]', 'abbr': 'each()'}, {'word': 'error_reporting', 'menu': 'Sets which PHP errors are reported', 'kind': '[f]', 'abbr': 'error_reporting()'}, {'word': 'define', 'menu': 'Defines a named constant', 'kind': '[f]', 'abbr': 'define()'}, {'word': 'defined', 'menu': 'Checks whether a given named constant exists', 'kind': '[f]', 'abbr': 'defined()'}, {'word': 'get_class', 'menu': 'Returns the name of the class of an object', 'kind': '[f]', 'abbr': 'get_class()'}, {'word': 'get_called_class', 'menu': 'the "Late Static Binding" class name', 'kind': '[f]', 'abbr': 'get_called_class()'}, {'word': 'get_parent_class', 'menu': 'Retrieves the parent class name for object or class', 'kind': '[f]', 'abbr': 'get_parent_class()'}, {'word': 'method_exists', 'menu': 'Checks if the class method exists', 'kind': '[f]', 'abbr': 'method_exists()'}, {'word': 'property_exists', 'menu': 'Checks if the object or class has a property', 'kind': '[f]', 'abbr': 'property_exists()'}, {'word': 'class_exists', 'menu': 'Checks if the class has been defined', 'kind': '[f]', 'abbr': 'class_exists()'}, {'word': 'interface_exists', 'menu': 'Checks if the interface has been defined', 'kind': '[f]', 'abbr': 'interface_exists()'}, {'word': 'trait_exists', 'menu': 'Checks if the trait exists', 'kind': '[f]', 'abbr': 'trait_exists()'}, {'word': 'function_exists', 'menu': 'Return &true; if the given function has been defined', 'kind': '[f]', 'abbr': 'function_exists()'}, {'word': 'class_alias', 'menu': 'Creates an alias for a class', 'kind': '[f]', 'abbr': 'class_alias()'}, {'word': 'get_included_files', 'menu': 'Returns an array with the names of included or required files', 'kind': '[f]', 'abbr': 'get_included_files()'}, {'word': 'get_required_files', 'menu': '&Alias; get_included_files', 'kind': '[f]', 'abbr': 'get_required_files()'}, {'word': 'is_subclass_of', 'menu': 'Checks if the object has this class as one of its parents or implements it.', 'kind': '[f]', 'abbr': 'is_subclass_of()'}, {'word': 'is_a', 'menu': 'Checks if the object is of this class or has this class as one of its parents', 'kind': '[f]', 'abbr': 'is_a()'}, {'word': 'get_class_vars', 'menu': 'Get the default properties of the class', 'kind': '[f]', 'abbr': 'get_class_vars()'}, {'word': 'get_object_vars', 'menu': 'Gets the properties of the given object', 'kind': '[f]', 'abbr': 'get_object_vars()'}, {'word': 'get_class_methods', 'menu': 'Gets the class methods'' names', 'kind': '[f]', 'abbr': 'get_class_methods()'}, {'word': 'trigger_error', 'menu': 'Generates a user-level error/warning/notice message', 'kind': '[f]', 'abbr': 'trigger_error()'}, {'word': 'user_error', 'menu': 'Alias of trigger_error', 'kind': '[f]', 'abbr': 'user_error()'}, {'word': 'set_error_handler', 'menu': 'Sets a user-defined error handler function', 'kind': '[f]', 'abbr': 'set_error_handler()'}, {'word': 'restore_error_handler', 'menu': 'Restores the previous error handler function', 'kind': '[f]', 'abbr': 'restore_error_handler()'}, {'word': 'set_exception_handler', 'menu': 'Sets a user-defined exception handler function', 'kind': '[f]', 'abbr': 'set_exception_handler()'}, {'word': 'restore_exception_handler', 'menu': 'Restores the previously defined exception handler function', 'kind': '[f]', 'abbr': 'restore_exception_handler()'}, {'word': 'get_declared_classes', 'menu': 'Returns an array with the name of the defined classes', 'kind': '[f]', 'abbr': 'get_declared_classes()'}, {'word': 'get_declared_traits', 'menu': 'Returns an array of all declared traits', 'kind': '[f]', 'abbr': 'get_declared_traits()'}, {'word': 'get_declared_interfaces', 'menu': 'Returns an array of all declared interfaces', 'kind': '[f]', 'abbr': 'get_declared_interfaces()'}, {'word': 'get_defined_functions', 'menu': 'Returns an array of all defined functions', 'kind': '[f]', 'abbr': 'get_defined_functions()'}, {'word': 'get_defined_vars', 'menu': 'Returns an array of all defined variables', 'kind': '[f]', 'abbr': 'get_defined_vars()'}, {'word': 'create_function', 'menu': 'Create an anonymous (lambda-style) function', 'kind': '[f]', 'abbr': 'create_function()'}, {'word': 'get_resource_type', 'menu': 'Returns the resource type', 'kind': '[f]', 'abbr': 'get_resource_type()'}, {'word': 'get_loaded_extensions', 'menu': 'Returns an array with the names of all modules compiled and loaded', 'kind': '[f]', 'abbr': 'get_loaded_extensions()'}, {'word': 'extension_loaded', 'menu': 'Find out whether an extension is loaded', 'kind': '[f]', 'abbr': 'extension_loaded()'}, {'word': 'get_extension_funcs', 'menu': 'Returns an array with the names of the functions of a module', 'kind': '[f]', 'abbr': 'get_extension_funcs()'}, {'word': 'get_defined_constants', 'menu': 'Returns an associative array with the names of all the constants and their values', 'kind': '[f]', 'abbr': 'get_defined_constants()'}, {'word': 'debug_backtrace', 'menu': 'Generates a backtrace', 'kind': '[f]', 'abbr': 'debug_backtrace()'}, {'word': 'debug_print_backtrace', 'menu': 'Prints a backtrace', 'kind': '[f]', 'abbr': 'debug_print_backtrace()'}, {'word': 'gc_collect_cycles', 'menu': 'Forces collection of any existing garbage cycles', 'kind': '[f]', 'abbr': 'gc_collect_cycles()'}, {'word': 'gc_enabled', 'menu': 'Returns status of the circular reference collector', 'kind': '[f]', 'abbr': 'gc_enabled()'}, {'word': 'gc_enable', 'menu': 'Activates the circular reference collector', 'kind': '[f]', 'abbr': 'gc_enable()'}, {'word': 'gc_disable', 'menu': 'Deactivates the circular reference collector', 'kind': '[f]', 'abbr': 'gc_disable()'}, {'word': 'strtotime', 'menu': 'Parse about any English textual datetime description into a Unix timestamp', 'kind': '[f]', 'abbr': 'strtotime()'}, {'word': 'date', 'menu': 'Format a local time/date', 'kind': '[f]', 'abbr': 'date()'}, {'word': 'idate', 'menu': 'Format a local time/date as integer', 'kind': '[f]', 'abbr': 'idate()'}, {'word': 'gmdate', 'menu': 'Format a GMT/UTC date/time', 'kind': '[f]', 'abbr': 'gmdate()'}, {'word': 'mktime', 'menu': 'Get Unix timestamp for a date', 'kind': '[f]', 'abbr': 'mktime()'}, {'word': 'gmmktime', 'menu': 'Get Unix timestamp for a GMT date', 'kind': '[f]', 'abbr': 'gmmktime()'}, {'word': 'checkdate', 'menu': 'Validate a Gregorian date', 'kind': '[f]', 'abbr': 'checkdate()'}, {'word': 'strftime', 'menu': 'Format a local time/date according to locale settings', 'kind': '[f]', 'abbr': 'strftime()'}, {'word': 'gmstrftime', 'menu': 'Format a GMT/UTC time/date according to locale settings', 'kind': '[f]', 'abbr': 'gmstrftime()'}, {'word': 'time', 'menu': 'Returns the current time in fractional seconds since the epoch.', 'kind': '[f]', 'abbr': 'time()'}, {'word': 'localtime', 'menu': 'Parse string to a field-based time value', 'kind': '[f]', 'abbr': 'localtime()'}, {'word': 'getdate', 'menu': 'Get date/time information', 'kind': '[f]', 'abbr': 'getdate()'}, {'word': 'date_create', 'menu': '&Alias; DateTime::__construct', 'kind': '[f]', 'abbr': 'date_create()'}, {'word': 'date_create_immutable', 'menu': '&Alias; DateTimeImmutable::__construct', 'kind': '[f]', 'abbr': 'date_create_immutable()'}, {'word': 'date_create_from_format', 'menu': '&Alias; DateTime::createFromFormat', 'kind': '[f]', 'abbr': 'date_create_from_format()'}, {'word': 'date_create_immutable_from_format', 'menu': '&Alias; DateTimeImmutable::createFromFormat', 'kind': '[f]', 'abbr': 'date_create_immutable_from_format()'}, {'word': 'date_parse', 'menu': 'Returns associative array with detailed info about given date', 'kind': '[f]', 'abbr': 'date_parse()'}, {'word': 'date_parse_from_format', 'menu': 'Get info about given date formatted according to the specified format', 'kind': '[f]', 'abbr': 'date_parse_from_format()'}, {'word': 'date_get_last_errors', 'menu': '&Alias; DateTime::getLastErrors', 'kind': '[f]', 'abbr': 'date_get_last_errors()'}, {'word': 'date_format', 'menu': '&Alias; DateTime::format', 'kind': '[f]', 'abbr': 'date_format()'}, {'word': 'date_modify', 'menu': '&Alias; DateTime::modify', 'kind': '[f]', 'abbr': 'date_modify()'}, {'word': 'date_add', 'menu': '&Alias; DateTime::add', 'kind': '[f]', 'abbr': 'date_add()'}, {'word': 'date_sub', 'menu': '&Alias; DateTime::sub', 'kind': '[f]', 'abbr': 'date_sub()'}, {'word': 'date_timezone_get', 'menu': '&Alias; DateTime::getTimezone', 'kind': '[f]', 'abbr': 'date_timezone_get()'}, {'word': 'date_timezone_set', 'menu': '&Alias; DateTime::setTimezone', 'kind': '[f]', 'abbr': 'date_timezone_set()'}, {'word': 'date_offset_get', 'menu': '&Alias; DateTime::getOffset', 'kind': '[f]', 'abbr': 'date_offset_get()'}, {'word': 'date_diff', 'menu': '&Alias; DateTime::diff', 'kind': '[f]', 'abbr': 'date_diff()'}, {'word': 'date_time_set', 'menu': '&Alias; DateTime::setTime', 'kind': '[f]', 'abbr': 'date_time_set()'}, {'word': 'date_date_set', 'menu': '&Alias; DateTime::setDate', 'kind': '[f]', 'abbr': 'date_date_set()'}, {'word': 'date_isodate_set', 'menu': '&Alias; DateTime::setISODate', 'kind': '[f]', 'abbr': 'date_isodate_set()'}, {'word': 'date_timestamp_set', 'menu': '&Alias; DateTime::setTimestamp', 'kind': '[f]', 'abbr': 'date_timestamp_set()'}, {'word': 'date_timestamp_get', 'menu': '&Alias; DateTime::getTimestamp', 'kind': '[f]', 'abbr': 'date_timestamp_get()'}, {'word': 'timezone_open', 'menu': '&Alias; DateTimeZone::__construct', 'kind': '[f]', 'abbr': 'timezone_open()'}, {'word': 'timezone_name_get', 'menu': '&Alias; DateTimeZone::getName', 'kind': '[f]', 'abbr': 'timezone_name_get()'}, {'word': 'timezone_name_from_abbr', 'menu': 'Returns the timezone name from abbreviation', 'kind': '[f]', 'abbr': 'timezone_name_from_abbr()'}, {'word': 'timezone_offset_get', 'menu': '&Alias; DateTimeZone::getOffset', 'kind': '[f]', 'abbr': 'timezone_offset_get()'}, {'word': 'timezone_transitions_get', 'menu': '&Alias; DateTimeZone::getTransitions', 'kind': '[f]', 'abbr': 'timezone_transitions_get()'}, {'word': 'timezone_location_get', 'menu': '&Alias; DateTimeZone::getLocation', 'kind': '[f]', 'abbr': 'timezone_location_get()'}, {'word': 'timezone_identifiers_list', 'menu': '&Alias; DateTimeZone::listIdentifiers', 'kind': '[f]', 'abbr': 'timezone_identifiers_list()'}, {'word': 'timezone_abbreviations_list', 'menu': '&Alias; DateTimeZone::listAbbreviations', 'kind': '[f]', 'abbr': 'timezone_abbreviations_list()'}, {'word': 'timezone_version_get', 'menu': 'Gets the version of the timezonedb', 'kind': '[f]', 'abbr': 'timezone_version_get()'}, {'word': 'date_interval_create_from_date_string', 'menu': '&Alias; DateInterval::createFromDateString', 'kind': '[f]', 'abbr': 'date_interval_create_from_date_string()'}, {'word': 'date_interval_format', 'menu': '&Alias; DateInterval::format', 'kind': '[f]', 'abbr': 'date_interval_format()'}, {'word': 'date_default_timezone_set', 'menu': 'Sets the default timezone used by all date/time functions in a script', 'kind': '[f]', 'abbr': 'date_default_timezone_set()'}, {'word': 'date_default_timezone_get', 'menu': 'Gets the default timezone used by all date/time functions in a script', 'kind': '[f]', 'abbr': 'date_default_timezone_get()'}, {'word': 'date_sunrise', 'menu': 'Returns time of sunrise for a given day and location', 'kind': '[f]', 'abbr': 'date_sunrise()'}, {'word': 'date_sunset', 'menu': 'Returns time of sunset for a given day and location', 'kind': '[f]', 'abbr': 'date_sunset()'}, {'word': 'date_sun_info', 'menu': 'Returns an array with information about sunset/sunrise and twilight begin/end', 'kind': '[f]', 'abbr': 'date_sun_info()'}, {'word': 'ereg', 'menu': 'Regular expression match', 'kind': '[f]', 'abbr': 'ereg()'}, {'word': 'ereg_replace', 'menu': 'Replace regular expression', 'kind': '[f]', 'abbr': 'ereg_replace()'}, {'word': 'eregi', 'menu': 'Case insensitive regular expression match', 'kind': '[f]', 'abbr': 'eregi()'}, {'word': 'eregi_replace', 'menu': 'Replace regular expression case insensitive', 'kind': '[f]', 'abbr': 'eregi_replace()'}, {'word': 'split', 'menu': 'Split string into array by regular expression', 'kind': '[f]', 'abbr': 'split()'}, {'word': 'spliti', 'menu': 'Split string into array by regular expression case insensitive', 'kind': '[f]', 'abbr': 'spliti()'}, {'word': 'sql_regcase', 'menu': 'Make regular expression for case insensitive match', 'kind': '[f]', 'abbr': 'sql_regcase()'}, {'word': 'libxml_set_streams_context', 'menu': 'Set the streams context for the next libxml document load or write', 'kind': '[f]', 'abbr': 'libxml_set_streams_context()'}, {'word': 'libxml_use_internal_errors', 'menu': 'Disable libxml errors and allow user to fetch error information as needed', 'kind': '[f]', 'abbr': 'libxml_use_internal_errors()'}, {'word': 'libxml_get_last_error', 'menu': 'Retrieve last error from libxml', 'kind': '[f]', 'abbr': 'libxml_get_last_error()'}, {'word': 'libxml_clear_errors', 'menu': 'Clear libxml error buffer', 'kind': '[f]', 'abbr': 'libxml_clear_errors()'}, {'word': 'libxml_get_errors', 'menu': 'Retrieve array of errors', 'kind': '[f]', 'abbr': 'libxml_get_errors()'}, {'word': 'libxml_disable_entity_loader', 'menu': 'Disable the ability to load external entities', 'kind': '[f]', 'abbr': 'libxml_disable_entity_loader()'}, {'word': 'libxml_set_external_entity_loader', 'menu': 'Changes the default external entity loader', 'kind': '[f]', 'abbr': 'libxml_set_external_entity_loader()'}, {'word': 'openssl_get_cert_locations', 'menu': 'Retrieve the available certificate locations', 'kind': '[f]', 'abbr': 'openssl_get_cert_locations()'}, {'word': 'openssl_spki_new', 'menu': 'Generate a new signed public key and challenge', 'kind': '[f]', 'abbr': 'openssl_spki_new()'}, {'word': 'openssl_spki_verify', 'menu': 'Verifies a signed public key and challenge', 'kind': '[f]', 'abbr': 'openssl_spki_verify()'}, {'word': 'openssl_spki_export', 'menu': 'Exports a valid PEM formatted public key signed public key and challenge', 'kind': '[f]', 'abbr': 'openssl_spki_export()'}, {'word': 'openssl_spki_export_challenge', 'menu': 'Exports the challenge assoicated with a signed public key and challenge', 'kind': '[f]', 'abbr': 'openssl_spki_export_challenge()'}, {'word': 'openssl_pkey_free', 'menu': 'Frees a private key', 'kind': '[f]', 'abbr': 'openssl_pkey_free()'}, {'word': 'openssl_pkey_new', 'menu': 'Generates a new private key', 'kind': '[f]', 'abbr': 'openssl_pkey_new()'}, {'word': 'openssl_pkey_export', 'menu': 'Gets an exportable representation of a key into a string', 'kind': '[f]', 'abbr': 'openssl_pkey_export()'}, {'word': 'openssl_pkey_export_to_file', 'menu': 'Gets an exportable representation of a key into a file', 'kind': '[f]', 'abbr': 'openssl_pkey_export_to_file()'}, {'word': 'openssl_pkey_get_private', 'menu': 'Get a private key', 'kind': '[f]', 'abbr': 'openssl_pkey_get_private()'}, {'word': 'openssl_pkey_get_public', 'menu': 'Extract public key from certificate and prepare it for use', 'kind': '[f]', 'abbr': 'openssl_pkey_get_public()'}, {'word': 'openssl_pkey_get_details', 'menu': 'Returns an array with the key details', 'kind': '[f]', 'abbr': 'openssl_pkey_get_details()'}, {'word': 'openssl_free_key', 'menu': 'Free key resource', 'kind': '[f]', 'abbr': 'openssl_free_key()'}, {'word': 'openssl_get_privatekey', 'menu': '&Alias; openssl_pkey_get_private', 'kind': '[f]', 'abbr': 'openssl_get_privatekey()'}, {'word': 'openssl_get_publickey', 'menu': '&Alias; openssl_pkey_get_public', 'kind': '[f]', 'abbr': 'openssl_get_publickey()'}, {'word': 'openssl_x509_read', 'menu': 'Parse an X.509 certificate and return a resource identifier for  it', 'kind': '[f]', 'abbr': 'openssl_x509_read()'}, {'word': 'openssl_x509_free', 'menu': 'Free certificate resource', 'kind': '[f]', 'abbr': 'openssl_x509_free()'}, {'word': 'openssl_x509_parse', 'menu': 'Parse an X509 certificate and return the information as an array', 'kind': '[f]', 'abbr': 'openssl_x509_parse()'}, {'word': 'openssl_x509_checkpurpose', 'menu': 'Verifies if a certificate can be used for a particular purpose', 'kind': '[f]', 'abbr': 'openssl_x509_checkpurpose()'}, {'word': 'openssl_x509_check_private_key', 'menu': 'Checks if a private key corresponds to a certificate', 'kind': '[f]', 'abbr': 'openssl_x509_check_private_key()'}, {'word': 'openssl_x509_export', 'menu': 'Exports a certificate as a string', 'kind': '[f]', 'abbr': 'openssl_x509_export()'}, {'word': 'openssl_x509_fingerprint', 'menu': 'Calculates the fingerprint, or digest, of a given X.509 certificate', 'kind': '[f]', 'abbr': 'openssl_x509_fingerprint()'}, {'word': 'openssl_x509_export_to_file', 'menu': 'Exports a certificate to file', 'kind': '[f]', 'abbr': 'openssl_x509_export_to_file()'}, {'word': 'openssl_pkcs12_export', 'menu': 'Exports a PKCS#12 Compatible Certificate Store File to variable.', 'kind': '[f]', 'abbr': 'openssl_pkcs12_export()'}, {'word': 'openssl_pkcs12_export_to_file', 'menu': 'Exports a PKCS#12 Compatible Certificate Store File', 'kind': '[f]', 'abbr': 'openssl_pkcs12_export_to_file()'}, {'word': 'openssl_pkcs12_read', 'menu': 'Parse a PKCS#12 Certificate Store into an array', 'kind': '[f]', 'abbr': 'openssl_pkcs12_read()'}, {'word': 'openssl_csr_new', 'menu': 'Generates a CSR', 'kind': '[f]', 'abbr': 'openssl_csr_new()'}, {'word': 'openssl_csr_export', 'menu': 'Exports a CSR as a string', 'kind': '[f]', 'abbr': 'openssl_csr_export()'}, {'word': 'openssl_csr_export_to_file', 'menu': 'Exports a CSR to a file', 'kind': '[f]', 'abbr': 'openssl_csr_export_to_file()'}, {'word': 'openssl_csr_sign', 'menu': 'Sign a CSR with another certificate (or itself) and generate a certificate', 'kind': '[f]', 'abbr': 'openssl_csr_sign()'}, {'word': 'openssl_csr_get_subject', 'menu': 'Returns the subject of a CERT', 'kind': '[f]', 'abbr': 'openssl_csr_get_subject()'}, {'word': 'openssl_csr_get_public_key', 'menu': 'Returns the public key of a CERT', 'kind': '[f]', 'abbr': 'openssl_csr_get_public_key()'}, {'word': 'openssl_digest', 'menu': 'Computes a digest', 'kind': '[f]', 'abbr': 'openssl_digest()'}, {'word': 'openssl_encrypt', 'menu': 'Encrypts data', 'kind': '[f]', 'abbr': 'openssl_encrypt()'}, {'word': 'openssl_decrypt', 'menu': 'Decrypts data', 'kind': '[f]', 'abbr': 'openssl_decrypt()'}, {'word': 'openssl_cipher_iv_length', 'menu': 'Gets the cipher iv length', 'kind': '[f]', 'abbr': 'openssl_cipher_iv_length()'}, {'word': 'openssl_sign', 'menu': 'Generate signature', 'kind': '[f]', 'abbr': 'openssl_sign()'}, {'word': 'openssl_verify', 'menu': 'Verify signature', 'kind': '[f]', 'abbr': 'openssl_verify()'}, {'word': 'openssl_seal', 'menu': 'Seal (encrypt) data', 'kind': '[f]', 'abbr': 'openssl_seal()'}, {'word': 'openssl_open', 'menu': 'Open sealed data', 'kind': '[f]', 'abbr': 'openssl_open()'}, {'word': 'openssl_pbkdf2', 'menu': 'Generates a PKCS5 v2 PBKDF2 string, defaults to SHA-1', 'kind': '[f]', 'abbr': 'openssl_pbkdf2()'}, {'word': 'openssl_pkcs7_verify', 'menu': 'Verifies the signature of an S/MIME signed message', 'kind': '[f]', 'abbr': 'openssl_pkcs7_verify()'}, {'word': 'openssl_pkcs7_decrypt', 'menu': 'Decrypts an S/MIME encrypted message', 'kind': '[f]', 'abbr': 'openssl_pkcs7_decrypt()'}, {'word': 'openssl_pkcs7_sign', 'menu': 'Sign an S/MIME message', 'kind': '[f]', 'abbr': 'openssl_pkcs7_sign()'}, {'word': 'openssl_pkcs7_encrypt', 'menu': 'Encrypt an S/MIME message', 'kind': '[f]', 'abbr': 'openssl_pkcs7_encrypt()'}, {'word': 'openssl_private_encrypt', 'menu': 'Encrypts data with private key', 'kind': '[f]', 'abbr': 'openssl_private_encrypt()'}, {'word': 'openssl_private_decrypt', 'menu': 'Decrypts data with private key', 'kind': '[f]', 'abbr': 'openssl_private_decrypt()'}, {'word': 'openssl_public_encrypt', 'menu': 'Encrypts data with public key', 'kind': '[f]', 'abbr': 'openssl_public_encrypt()'}, {'word': 'openssl_public_decrypt', 'menu': 'Decrypts data with public key', 'kind': '[f]', 'abbr': 'openssl_public_decrypt()'}, {'word': 'openssl_get_md_methods', 'menu': 'Gets available digest methods', 'kind': '[f]', 'abbr': 'openssl_get_md_methods()'}, {'word': 'openssl_get_cipher_methods', 'menu': 'Gets available cipher methods', 'kind': '[f]', 'abbr': 'openssl_get_cipher_methods()'}, {'word': 'openssl_dh_compute_key', 'menu': 'Computes shared secret for public value of remote DH key and local DH key', 'kind': '[f]', 'abbr': 'openssl_dh_compute_key()'}, {'word': 'openssl_random_pseudo_bytes', 'menu': 'Generate a pseudo-random string of bytes', 'kind': '[f]', 'abbr': 'openssl_random_pseudo_bytes()'}, {'word': 'openssl_error_string', 'menu': 'Return openSSL error message', 'kind': '[f]', 'abbr': 'openssl_error_string()'}, {'word': 'preg_match', 'menu': 'Perform a regular expression match', 'kind': '[f]', 'abbr': 'preg_match()'}, {'word': 'preg_match_all', 'menu': 'Perform a global regular expression match', 'kind': '[f]', 'abbr': 'preg_match_all()'}, {'word': 'preg_replace', 'menu': 'Perform a regular expression search and replace', 'kind': '[f]', 'abbr': 'preg_replace()'}, {'word': 'preg_replace_callback', 'menu': 'Perform a regular expression search and replace using a callback', 'kind': '[f]', 'abbr': 'preg_replace_callback()'}, {'word': 'preg_filter', 'menu': 'Perform a regular expression search and replace', 'kind': '[f]', 'abbr': 'preg_filter()'}, {'word': 'preg_split', 'menu': 'Split string by a regular expression', 'kind': '[f]', 'abbr': 'preg_split()'}, {'word': 'preg_quote', 'menu': 'Quote regular expression characters', 'kind': '[f]', 'abbr': 'preg_quote()'}, {'word': 'preg_grep', 'menu': 'Return array entries that match the pattern', 'kind': '[f]', 'abbr': 'preg_grep()'}, {'word': 'preg_last_error', 'menu': 'Returns the error code of the last PCRE regex execution', 'kind': '[f]', 'abbr': 'preg_last_error()'}, {'word': 'readgzfile', 'menu': 'Output a gz-file', 'kind': '[f]', 'abbr': 'readgzfile()'}, {'word': 'gzrewind', 'menu': 'Rewind the position of a gz-file pointer', 'kind': '[f]', 'abbr': 'gzrewind()'}, {'word': 'gzclose', 'menu': 'Close an open gz-file pointer', 'kind': '[f]', 'abbr': 'gzclose()'}, {'word': 'gzeof', 'menu': 'Test for EOF on a gz-file pointer', 'kind': '[f]', 'abbr': 'gzeof()'}, {'word': 'gzgetc', 'menu': 'Get character from gz-file pointer', 'kind': '[f]', 'abbr': 'gzgetc()'}, {'word': 'gzgets', 'menu': 'Get line from file pointer', 'kind': '[f]', 'abbr': 'gzgets()'}, {'word': 'gzgetss', 'menu': 'Get line from gz-file pointer and strip HTML tags', 'kind': '[f]', 'abbr': 'gzgetss()'}, {'word': 'gzread', 'menu': 'Binary-safe gz-file read', 'kind': '[f]', 'abbr': 'gzread()'}, {'word': 'gzopen', 'menu': 'Open gz-file', 'kind': '[f]', 'abbr': 'gzopen()'}, {'word': 'gzpassthru', 'menu': 'Output all remaining data on a gz-file pointer', 'kind': '[f]', 'abbr': 'gzpassthru()'}, {'word': 'gzseek', 'menu': 'Seek on a gz-file pointer', 'kind': '[f]', 'abbr': 'gzseek()'}, {'word': 'gztell', 'menu': 'Tell gz-file pointer read/write position', 'kind': '[f]', 'abbr': 'gztell()'}, {'word': 'gzwrite', 'menu': 'Binary-safe gz-file write', 'kind': '[f]', 'abbr': 'gzwrite()'}, {'word': 'gzputs', 'menu': '&Alias; gzwrite', 'kind': '[f]', 'abbr': 'gzputs()'}, {'word': 'gzfile', 'menu': 'Read entire gz-file into an array', 'kind': '[f]', 'abbr': 'gzfile()'}, {'word': 'gzcompress', 'menu': 'Compress a string', 'kind': '[f]', 'abbr': 'gzcompress()'}, {'word': 'gzuncompress', 'menu': 'Uncompress a compressed string', 'kind': '[f]', 'abbr': 'gzuncompress()'}, {'word': 'gzdeflate', 'menu': 'Deflate a string', 'kind': '[f]', 'abbr': 'gzdeflate()'}, {'word': 'gzinflate', 'menu': 'Inflate a deflated string', 'kind': '[f]', 'abbr': 'gzinflate()'}, {'word': 'gzencode', 'menu': 'Create a gzip compressed string', 'kind': '[f]', 'abbr': 'gzencode()'}, {'word': 'gzdecode', 'menu': 'Decodes a gzip compressed string', 'kind': '[f]', 'abbr': 'gzdecode()'}, {'word': 'zlib_encode', 'menu': 'Compress data with the specified encoding', 'kind': '[f]', 'abbr': 'zlib_encode()'}, {'word': 'zlib_decode', 'menu': 'Uncompress any raw/gzip/zlib encoded data', 'kind': '[f]', 'abbr': 'zlib_decode()'}, {'word': 'zlib_get_coding_type', 'menu': 'Returns the coding type used for output compression', 'kind': '[f]', 'abbr': 'zlib_get_coding_type()'}, {'word': 'ob_gzhandler', 'menu': 'ob_start callback function to gzip output buffer', 'kind': '[f]', 'abbr': 'ob_gzhandler()'}, {'word': 'bcadd', 'menu': 'Add two arbitrary precision numbers', 'kind': '[f]', 'abbr': 'bcadd()'}, {'word': 'bcsub', 'menu': 'Subtract one arbitrary precision number from another', 'kind': '[f]', 'abbr': 'bcsub()'}, {'word': 'bcmul', 'menu': 'Multiply two arbitrary precision numbers', 'kind': '[f]', 'abbr': 'bcmul()'}, {'word': 'bcdiv', 'menu': 'Divide two arbitrary precision numbers', 'kind': '[f]', 'abbr': 'bcdiv()'}, {'word': 'bcmod', 'menu': 'Get modulus of an arbitrary precision number', 'kind': '[f]', 'abbr': 'bcmod()'}, {'word': 'bcpow', 'menu': 'Raise an arbitrary precision number to another', 'kind': '[f]', 'abbr': 'bcpow()'}, {'word': 'bcsqrt', 'menu': 'Get the square root of an arbitrary precision number', 'kind': '[f]', 'abbr': 'bcsqrt()'}, {'word': 'bcscale', 'menu': 'Set default scale parameter for all bc math functions', 'kind': '[f]', 'abbr': 'bcscale()'}, {'word': 'bccomp', 'menu': 'Compare two arbitrary precision numbers', 'kind': '[f]', 'abbr': 'bccomp()'}, {'word': 'bcpowmod', 'menu': 'Raise an arbitrary precision number to another, reduced by a specified modulus', 'kind': '[f]', 'abbr': 'bcpowmod()'}, {'word': 'bzopen', 'menu': 'Opens a bzip2 compressed file', 'kind': '[f]', 'abbr': 'bzopen()'}, {'word': 'bzread', 'menu': 'Binary safe bzip2 file read', 'kind': '[f]', 'abbr': 'bzread()'}, {'word': 'bzwrite', 'menu': 'Binary safe bzip2 file write', 'kind': '[f]', 'abbr': 'bzwrite()'}, {'word': 'bzflush', 'menu': 'Force a write of all buffered data', 'kind': '[f]', 'abbr': 'bzflush()'}, {'word': 'bzclose', 'menu': 'Close a bzip2 file', 'kind': '[f]', 'abbr': 'bzclose()'}, {'word': 'bzerrno', 'menu': 'Returns a bzip2 error number', 'kind': '[f]', 'abbr': 'bzerrno()'}, {'word': 'bzerrstr', 'menu': 'Returns a bzip2 error string', 'kind': '[f]', 'abbr': 'bzerrstr()'}, {'word': 'bzerror', 'menu': 'Returns the bzip2 error number and error string in an array', 'kind': '[f]', 'abbr': 'bzerror()'}, {'word': 'bzcompress', 'menu': 'Compress a string into bzip2 encoded data', 'kind': '[f]', 'abbr': 'bzcompress()'}, {'word': 'bzdecompress', 'menu': 'Decompresses bzip2 encoded data', 'kind': '[f]', 'abbr': 'bzdecompress()'}, {'word': 'jdtogregorian', 'menu': 'Converts Julian Day Count to Gregorian date', 'kind': '[f]', 'abbr': 'jdtogregorian()'}, {'word': 'gregoriantojd', 'menu': 'Converts a Gregorian date to Julian Day Count', 'kind': '[f]', 'abbr': 'gregoriantojd()'}, {'word': 'jdtojulian', 'menu': 'Converts a Julian Day Count to a Julian Calendar Date', 'kind': '[f]', 'abbr': 'jdtojulian()'}, {'word': 'juliantojd', 'menu': 'Converts a Julian Calendar date to Julian Day Count', 'kind': '[f]', 'abbr': 'juliantojd()'}, {'word': 'jdtojewish', 'menu': 'Converts a Julian day count to a Jewish calendar date', 'kind': '[f]', 'abbr': 'jdtojewish()'}, {'word': 'jewishtojd', 'menu': 'Converts a date in the Jewish Calendar to Julian Day Count', 'kind': '[f]', 'abbr': 'jewishtojd()'}, {'word': 'jdtofrench', 'menu': 'Converts a Julian Day Count to the French Republican Calendar', 'kind': '[f]', 'abbr': 'jdtofrench()'}, {'word': 'frenchtojd', 'menu': 'Converts a date from the French Republican Calendar to a Julian Day Count', 'kind': '[f]', 'abbr': 'frenchtojd()'}, {'word': 'jddayofweek', 'menu': 'Returns the day of the week', 'kind': '[f]', 'abbr': 'jddayofweek()'}, {'word': 'jdmonthname', 'menu': 'Returns a month name', 'kind': '[f]', 'abbr': 'jdmonthname()'}, {'word': 'easter_date', 'menu': 'Get Unix timestamp for midnight on Easter of a given year', 'kind': '[f]', 'abbr': 'easter_date()'}, {'word': 'easter_days', 'menu': 'Get number of days after March 21 on which Easter falls for a given year', 'kind': '[f]', 'abbr': 'easter_days()'}, {'word': 'unixtojd', 'menu': 'Convert Unix timestamp to Julian Day', 'kind': '[f]', 'abbr': 'unixtojd()'}, {'word': 'jdtounix', 'menu': 'Convert Julian Day to Unix timestamp', 'kind': '[f]', 'abbr': 'jdtounix()'}, {'word': 'cal_to_jd', 'menu': 'Converts from a supported calendar to Julian Day Count', 'kind': '[f]', 'abbr': 'cal_to_jd()'}, {'word': 'cal_from_jd', 'menu': 'Converts from Julian Day Count to a supported calendar', 'kind': '[f]', 'abbr': 'cal_from_jd()'}, {'word': 'cal_days_in_month', 'menu': 'Return the number of days in a month for a given year and calendar', 'kind': '[f]', 'abbr': 'cal_days_in_month()'}, {'word': 'cal_info', 'menu': 'Returns information about a particular calendar', 'kind': '[f]', 'abbr': 'cal_info()'}, {'word': 'ctype_alnum', 'menu': 'Check for alphanumeric character(s)', 'kind': '[f]', 'abbr': 'ctype_alnum()'}, {'word': 'ctype_alpha', 'menu': 'Check for alphabetic character(s)', 'kind': '[f]', 'abbr': 'ctype_alpha()'}, {'word': 'ctype_cntrl', 'menu': 'Check for control character(s)', 'kind': '[f]', 'abbr': 'ctype_cntrl()'}, {'word': 'ctype_digit', 'menu': 'Check for numeric character(s)', 'kind': '[f]', 'abbr': 'ctype_digit()'}, {'word': 'ctype_lower', 'menu': 'Check for lowercase character(s)', 'kind': '[f]', 'abbr': 'ctype_lower()'}, {'word': 'ctype_graph', 'menu': 'Check for any printable character(s) except space', 'kind': '[f]', 'abbr': 'ctype_graph()'}, {'word': 'ctype_print', 'menu': 'Check for printable character(s)', 'kind': '[f]', 'abbr': 'ctype_print()'}, {'word': 'ctype_punct', 'menu': 'Check for any printable character which is not whitespace or an   alphanumeric character', 'kind': '[f]', 'abbr': 'ctype_punct()'}, {'word': 'ctype_space', 'menu': 'Check for whitespace character(s)', 'kind': '[f]', 'abbr': 'ctype_space()'}, {'word': 'ctype_upper', 'menu': 'Check for uppercase character(s)', 'kind': '[f]', 'abbr': 'ctype_upper()'}, {'word': 'ctype_xdigit', 'menu': 'Check for character(s) representing a hexadecimal digit', 'kind': '[f]', 'abbr': 'ctype_xdigit()'}, {'word': 'curl_init', 'menu': 'Initialize a cURL session', 'kind': '[f]', 'abbr': 'curl_init()'}, {'word': 'curl_copy_handle', 'menu': 'Copy a cURL handle along with all of its preferences', 'kind': '[f]', 'abbr': 'curl_copy_handle()'}, {'word': 'curl_version', 'menu': 'Gets cURL version information', 'kind': '[f]', 'abbr': 'curl_version()'}, {'word': 'curl_setopt', 'menu': 'Set an option for a cURL transfer', 'kind': '[f]', 'abbr': 'curl_setopt()'}, {'word': 'curl_setopt_array', 'menu': 'Set multiple options for a cURL transfer', 'kind': '[f]', 'abbr': 'curl_setopt_array()'}, {'word': 'curl_exec', 'menu': 'Perform a cURL session', 'kind': '[f]', 'abbr': 'curl_exec()'}, {'word': 'curl_getinfo', 'menu': 'Get information regarding a specific transfer', 'kind': '[f]', 'abbr': 'curl_getinfo()'}, {'word': 'curl_error', 'menu': 'Return a string containing the last error for the current session', 'kind': '[f]', 'abbr': 'curl_error()'}, {'word': 'curl_errno', 'menu': 'Return the last error number', 'kind': '[f]', 'abbr': 'curl_errno()'}, {'word': 'curl_close', 'menu': 'Close a cURL session', 'kind': '[f]', 'abbr': 'curl_close()'}, {'word': 'curl_strerror', 'menu': 'Return string describing the given error code', 'kind': '[f]', 'abbr': 'curl_strerror()'}, {'word': 'curl_multi_strerror', 'menu': 'Return string describing error code', 'kind': '[f]', 'abbr': 'curl_multi_strerror()'}, {'word': 'curl_reset', 'menu': 'Reset all options of a libcurl session handle', 'kind': '[f]', 'abbr': 'curl_reset()'}, {'word': 'curl_escape', 'menu': 'URL encodes the given string', 'kind': '[f]', 'abbr': 'curl_escape()'}, {'word': 'curl_unescape', 'menu': 'Decodes the given URL encoded string', 'kind': '[f]', 'abbr': 'curl_unescape()'}, {'word': 'curl_pause', 'menu': 'Pause and unpause a connection', 'kind': '[f]', 'abbr': 'curl_pause()'}, {'word': 'curl_multi_init', 'menu': 'Returns a new cURL multi handle', 'kind': '[f]', 'abbr': 'curl_multi_init()'}, {'word': 'curl_multi_add_handle', 'menu': 'Add a normal cURL handle to a cURL multi handle', 'kind': '[f]', 'abbr': 'curl_multi_add_handle()'}, {'word': 'curl_multi_remove_handle', 'menu': 'Remove a multi handle from a set of cURL handles', 'kind': '[f]', 'abbr': 'curl_multi_remove_handle()'}, {'word': 'curl_multi_select', 'menu': 'Wait for activity on any curl_multi connection', 'kind': '[f]', 'abbr': 'curl_multi_select()'}, {'word': 'curl_multi_exec', 'menu': 'Run the sub-connections of the current cURL handle', 'kind': '[f]', 'abbr': 'curl_multi_exec()'}, {'word': 'curl_multi_getcontent', 'menu': 'Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set', 'kind': '[f]', 'abbr': 'curl_multi_getcontent()'}, {'word': 'curl_multi_info_read', 'menu': 'Get information about the current transfers', 'kind': '[f]', 'abbr': 'curl_multi_info_read()'}, {'word': 'curl_multi_close', 'menu': 'Close a set of cURL handles', 'kind': '[f]', 'abbr': 'curl_multi_close()'}, {'word': 'curl_multi_setopt', 'menu': 'Set an option for the cURL multi handle', 'kind': '[f]', 'abbr': 'curl_multi_setopt()'}, {'word': 'curl_share_init', 'menu': 'Initialize a cURL share handle', 'kind': '[f]', 'abbr': 'curl_share_init()'}, {'word': 'curl_share_close', 'menu': 'Close a cURL share handle', 'kind': '[f]', 'abbr': 'curl_share_close()'}, {'word': 'curl_share_setopt', 'menu': 'Set an option for a cURL share handle.', 'kind': '[f]', 'abbr': 'curl_share_setopt()'}, {'word': 'curl_file_create', 'menu': 'Create a CURLFile object', 'kind': '[f]', 'abbr': 'curl_file_create()'}, {'word': 'dba_open', 'menu': 'Open database', 'kind': '[f]', 'abbr': 'dba_open()'}, {'word': 'dba_popen', 'menu': 'Open database persistently', 'kind': '[f]', 'abbr': 'dba_popen()'}, {'word': 'dba_close', 'menu': 'Close a DBA database', 'kind': '[f]', 'abbr': 'dba_close()'}, {'word': 'dba_delete', 'menu': 'Delete DBA entry specified by key', 'kind': '[f]', 'abbr': 'dba_delete()'}, {'word': 'dba_exists', 'menu': 'Check whether key exists', 'kind': '[f]', 'abbr': 'dba_exists()'}, {'word': 'dba_fetch', 'menu': 'Fetch data specified by key', 'kind': '[f]', 'abbr': 'dba_fetch()'}, {'word': 'dba_insert', 'menu': 'Insert entry', 'kind': '[f]', 'abbr': 'dba_insert()'}, {'word': 'dba_replace', 'menu': 'Replace or insert entry', 'kind': '[f]', 'abbr': 'dba_replace()'}, {'word': 'dba_firstkey', 'menu': 'Fetch first key', 'kind': '[f]', 'abbr': 'dba_firstkey()'}, {'word': 'dba_nextkey', 'menu': 'Fetch next key', 'kind': '[f]', 'abbr': 'dba_nextkey()'}, {'word': 'dba_optimize', 'menu': 'Optimize database', 'kind': '[f]', 'abbr': 'dba_optimize()'}, {'word': 'dba_sync', 'menu': 'Synchronize database', 'kind': '[f]', 'abbr': 'dba_sync()'}, {'word': 'dba_handlers', 'menu': 'List all the handlers available', 'kind': '[f]', 'abbr': 'dba_handlers()'}, {'word': 'dba_list', 'menu': 'List all open database files', 'kind': '[f]', 'abbr': 'dba_list()'}, {'word': 'dba_key_split', 'menu': 'Splits a key in string representation into array representation', 'kind': '[f]', 'abbr': 'dba_key_split()'}, {'word': 'dom_import_simplexml', 'menu': 'Gets a DOMElement object from a   SimpleXMLElement object', 'kind': '[f]', 'abbr': 'dom_import_simplexml()'}, {'word': 'exif_read_data', 'menu': 'Reads the EXIF headers from JPEG or TIFF', 'kind': '[f]', 'abbr': 'exif_read_data()'}, {'word': 'read_exif_data', 'menu': '&Alias; exif_read_data', 'kind': '[f]', 'abbr': 'read_exif_data()'}, {'word': 'exif_tagname', 'menu': 'Get the header name for an index', 'kind': '[f]', 'abbr': 'exif_tagname()'}, {'word': 'exif_thumbnail', 'menu': 'Retrieve the embedded thumbnail of a TIFF or JPEG image', 'kind': '[f]', 'abbr': 'exif_thumbnail()'}, {'word': 'exif_imagetype', 'menu': 'Determine the type of an image', 'kind': '[f]', 'abbr': 'exif_imagetype()'}, {'word': 'finfo_open', 'menu': 'Create a new fileinfo resource', 'kind': '[f]', 'abbr': 'finfo_open()'}, {'word': 'finfo_close', 'menu': 'Close fileinfo resource', 'kind': '[f]', 'abbr': 'finfo_close()'}, {'word': 'finfo_set_flags', 'menu': 'Set libmagic configuration options', 'kind': '[f]', 'abbr': 'finfo_set_flags()'}, {'word': 'finfo_file', 'menu': 'Return information about a file', 'kind': '[f]', 'abbr': 'finfo_file()'}, {'word': 'finfo_buffer', 'menu': 'Return information about a string buffer', 'kind': '[f]', 'abbr': 'finfo_buffer()'}, {'word': 'mime_content_type', 'menu': 'Detect MIME Content-type for a file', 'kind': '[f]', 'abbr': 'mime_content_type()'}, {'word': 'filter_input', 'menu': 'Gets a specific external variable by name and optionally filters it', 'kind': '[f]', 'abbr': 'filter_input()'}, {'word': 'filter_var', 'menu': 'Filters a variable with a specified filter', 'kind': '[f]', 'abbr': 'filter_var()'}, {'word': 'filter_input_array', 'menu': 'Gets external variables and optionally filters them', 'kind': '[f]', 'abbr': 'filter_input_array()'}, {'word': 'filter_var_array', 'menu': 'Gets multiple variables and optionally filters them', 'kind': '[f]', 'abbr': 'filter_var_array()'}, {'word': 'filter_list', 'menu': 'Returns a list of all supported filters', 'kind': '[f]', 'abbr': 'filter_list()'}, {'word': 'filter_has_var', 'menu': 'Checks if variable of specified type exists', 'kind': '[f]', 'abbr': 'filter_has_var()'}, {'word': 'filter_id', 'menu': 'Returns the filter ID belonging to a named filter', 'kind': '[f]', 'abbr': 'filter_id()'}, {'word': 'ftp_connect', 'menu': 'Opens an FTP connection', 'kind': '[f]', 'abbr': 'ftp_connect()'}, {'word': 'ftp_ssl_connect', 'menu': 'Opens an Secure SSL-FTP connection', 'kind': '[f]', 'abbr': 'ftp_ssl_connect()'}, {'word': 'ftp_login', 'menu': 'Logs in to an FTP connection', 'kind': '[f]', 'abbr': 'ftp_login()'}, {'word': 'ftp_pwd', 'menu': 'Returns the current directory name', 'kind': '[f]', 'abbr': 'ftp_pwd()'}, {'word': 'ftp_cdup', 'menu': 'Changes to the parent directory', 'kind': '[f]', 'abbr': 'ftp_cdup()'}, {'word': 'ftp_chdir', 'menu': 'Changes the current directory on a FTP server', 'kind': '[f]', 'abbr': 'ftp_chdir()'}, {'word': 'ftp_exec', 'menu': 'Requests execution of a command on the FTP server', 'kind': '[f]', 'abbr': 'ftp_exec()'}, {'word': 'ftp_raw', 'menu': 'Sends an arbitrary command to an FTP server', 'kind': '[f]', 'abbr': 'ftp_raw()'}, {'word': 'ftp_mkdir', 'menu': 'Creates a directory', 'kind': '[f]', 'abbr': 'ftp_mkdir()'}, {'word': 'ftp_rmdir', 'menu': 'Removes a directory', 'kind': '[f]', 'abbr': 'ftp_rmdir()'}, {'word': 'ftp_chmod', 'menu': 'Set permissions on a file via FTP', 'kind': '[f]', 'abbr': 'ftp_chmod()'}, {'word': 'ftp_alloc', 'menu': 'Allocates space for a file to be uploaded', 'kind': '[f]', 'abbr': 'ftp_alloc()'}, {'word': 'ftp_nlist', 'menu': 'Returns a list of files in the given directory', 'kind': '[f]', 'abbr': 'ftp_nlist()'}, {'word': 'ftp_rawlist', 'menu': 'Returns a detailed list of files in the given directory', 'kind': '[f]', 'abbr': 'ftp_rawlist()'}, {'word': 'ftp_systype', 'menu': 'Returns the system type identifier of the remote FTP server', 'kind': '[f]', 'abbr': 'ftp_systype()'}, {'word': 'ftp_pasv', 'menu': 'Turns passive mode on or off', 'kind': '[f]', 'abbr': 'ftp_pasv()'}, {'word': 'ftp_get', 'menu': 'Downloads a file from the FTP server', 'kind': '[f]', 'abbr': 'ftp_get()'}, {'word': 'ftp_fget', 'menu': 'Downloads a file from the FTP server and saves to an open file', 'kind': '[f]', 'abbr': 'ftp_fget()'}, {'word': 'ftp_put', 'menu': 'Uploads a file to the FTP server', 'kind': '[f]', 'abbr': 'ftp_put()'}, {'word': 'ftp_fput', 'menu': 'Uploads from an open file to the FTP server', 'kind': '[f]', 'abbr': 'ftp_fput()'}, {'word': 'ftp_size', 'menu': 'Returns the size of the given file', 'kind': '[f]', 'abbr': 'ftp_size()'}, {'word': 'ftp_mdtm', 'menu': 'Returns the last modified time of the given file', 'kind': '[f]', 'abbr': 'ftp_mdtm()'}, {'word': 'ftp_rename', 'menu': 'Renames a file or a directory on the FTP server', 'kind': '[f]', 'abbr': 'ftp_rename()'}, {'word': 'ftp_delete', 'menu': 'Deletes a file on the FTP server', 'kind': '[f]', 'abbr': 'ftp_delete()'}, {'word': 'ftp_site', 'menu': 'Sends a SITE command to the server', 'kind': '[f]', 'abbr': 'ftp_site()'}, {'word': 'ftp_close', 'menu': 'Closes an FTP connection', 'kind': '[f]', 'abbr': 'ftp_close()'}, {'word': 'ftp_set_option', 'menu': 'Set miscellaneous runtime FTP options', 'kind': '[f]', 'abbr': 'ftp_set_option()'}, {'word': 'ftp_get_option', 'menu': 'Retrieves various runtime behaviours of the current FTP stream', 'kind': '[f]', 'abbr': 'ftp_get_option()'}, {'word': 'ftp_nb_fget', 'menu': 'Retrieves a file from the FTP server and writes it to an open file (non-blocking)', 'kind': '[f]', 'abbr': 'ftp_nb_fget()'}, {'word': 'ftp_nb_get', 'menu': 'Retrieves a file from the FTP server and writes it to a local file (non-blocking)', 'kind': '[f]', 'abbr': 'ftp_nb_get()'}, {'word': 'ftp_nb_continue', 'menu': 'Continues retrieving/sending a file (non-blocking)', 'kind': '[f]', 'abbr': 'ftp_nb_continue()'}, {'word': 'ftp_nb_put', 'menu': 'Stores a file on the FTP server (non-blocking)', 'kind': '[f]', 'abbr': 'ftp_nb_put()'}, {'word': 'ftp_nb_fput', 'menu': 'Stores a file from an open file to the FTP server (non-blocking)', 'kind': '[f]', 'abbr': 'ftp_nb_fput()'}, {'word': 'ftp_quit', 'menu': '&Alias; ftp_close', 'kind': '[f]', 'abbr': 'ftp_quit()'}, {'word': 'gd_info', 'menu': 'Retrieve information about the currently installed GD library', 'kind': '[f]', 'abbr': 'gd_info()'}, {'word': 'imagearc', 'menu': 'Draws an arc', 'kind': '[f]', 'abbr': 'imagearc()'}, {'word': 'imageellipse', 'menu': 'Draw an ellipse', 'kind': '[f]', 'abbr': 'imageellipse()'}, {'word': 'imagechar', 'menu': 'Draw a character horizontally', 'kind': '[f]', 'abbr': 'imagechar()'}, {'word': 'imagecharup', 'menu': 'Draw a character vertically', 'kind': '[f]', 'abbr': 'imagecharup()'}, {'word': 'imagecolorat', 'menu': 'Get the index of the color of a pixel', 'kind': '[f]', 'abbr': 'imagecolorat()'}, {'word': 'imagecolorallocate', 'menu': 'Allocate a color for an image', 'kind': '[f]', 'abbr': 'imagecolorallocate()'}, {'word': 'imagepalettecopy', 'menu': 'Copy the palette from one image to another', 'kind': '[f]', 'abbr': 'imagepalettecopy()'}, {'word': 'imagecreatefromstring', 'menu': 'Create a new image from the image stream in the string', 'kind': '[f]', 'abbr': 'imagecreatefromstring()'}, {'word': 'imagecolorclosest', 'menu': 'Get the index of the closest color to the specified color', 'kind': '[f]', 'abbr': 'imagecolorclosest()'}, {'word': 'imagecolorclosesthwb', 'menu': 'Get the index of the color which has the hue, white and blackness', 'kind': '[f]', 'abbr': 'imagecolorclosesthwb()'}, {'word': 'imagecolordeallocate', 'menu': 'De-allocate a color for an image', 'kind': '[f]', 'abbr': 'imagecolordeallocate()'}, {'word': 'imagecolorresolve', 'menu': 'Get the index of the specified color or its closest possible alternative', 'kind': '[f]', 'abbr': 'imagecolorresolve()'}, {'word': 'imagecolorexact', 'menu': 'Get the index of the specified color', 'kind': '[f]', 'abbr': 'imagecolorexact()'}, {'word': 'imagecolorset', 'menu': 'Set the color for the specified palette index', 'kind': '[f]', 'abbr': 'imagecolorset()'}, {'word': 'imagecolortransparent', 'menu': 'Define a color as transparent', 'kind': '[f]', 'abbr': 'imagecolortransparent()'}, {'word': 'imagecolorstotal', 'menu': 'Find out the number of colors in an image''s palette', 'kind': '[f]', 'abbr': 'imagecolorstotal()'}, {'word': 'imagecolorsforindex', 'menu': 'Get the colors for an index', 'kind': '[f]', 'abbr': 'imagecolorsforindex()'}, {'word': 'imagecopy', 'menu': 'Copy part of an image', 'kind': '[f]', 'abbr': 'imagecopy()'}, {'word': 'imagecopymerge', 'menu': 'Copy and merge part of an image', 'kind': '[f]', 'abbr': 'imagecopymerge()'}, {'word': 'imagecopymergegray', 'menu': 'Copy and merge part of an image with gray scale', 'kind': '[f]', 'abbr': 'imagecopymergegray()'}, {'word': 'imagecopyresized', 'menu': 'Copy and resize part of an image', 'kind': '[f]', 'abbr': 'imagecopyresized()'}, {'word': 'imagecreate', 'menu': 'Create a new palette based image', 'kind': '[f]', 'abbr': 'imagecreate()'}, {'word': 'imagecreatetruecolor', 'menu': 'Create a new true color image', 'kind': '[f]', 'abbr': 'imagecreatetruecolor()'}, {'word': 'imageistruecolor', 'menu': 'Finds whether an image is a truecolor image', 'kind': '[f]', 'abbr': 'imageistruecolor()'}, {'word': 'imagetruecolortopalette', 'menu': 'Convert a true color image to a palette image', 'kind': '[f]', 'abbr': 'imagetruecolortopalette()'}, {'word': 'imagepalettetotruecolor', 'menu': 'Converts a palette based image to true color', 'kind': '[f]', 'abbr': 'imagepalettetotruecolor()'}, {'word': 'imagesetthickness', 'menu': 'Set the thickness for line drawing', 'kind': '[f]', 'abbr': 'imagesetthickness()'}, {'word': 'imagefilledarc', 'menu': 'Draw a partial arc and fill it', 'kind': '[f]', 'abbr': 'imagefilledarc()'}, {'word': 'imagefilledellipse', 'menu': 'Draw a filled ellipse', 'kind': '[f]', 'abbr': 'imagefilledellipse()'}, {'word': 'imagealphablending', 'menu': 'Set the blending mode for an image', 'kind': '[f]', 'abbr': 'imagealphablending()'}, {'word': 'imagesavealpha', 'menu': 'Set the flag to save full alpha channel information (as opposed to single-color transparency) when saving PNG images', 'kind': '[f]', 'abbr': 'imagesavealpha()'}, {'word': 'imagecolorallocatealpha', 'menu': 'Allocate a color for an image', 'kind': '[f]', 'abbr': 'imagecolorallocatealpha()'}, {'word': 'imagecolorresolvealpha', 'menu': 'Get the index of the specified color + alpha or its closest possible alternative', 'kind': '[f]', 'abbr': 'imagecolorresolvealpha()'}, {'word': 'imagecolorclosestalpha', 'menu': 'Get the index of the closest color to the specified color + alpha', 'kind': '[f]', 'abbr': 'imagecolorclosestalpha()'}, {'word': 'imagecolorexactalpha', 'menu': 'Get the index of the specified color + alpha', 'kind': '[f]', 'abbr': 'imagecolorexactalpha()'}, {'word': 'imagecopyresampled', 'menu': 'Copy and resize part of an image with resampling', 'kind': '[f]', 'abbr': 'imagecopyresampled()'}, {'word': 'imagerotate', 'menu': 'Rotate an image with a given angle', 'kind': '[f]', 'abbr': 'imagerotate()'}, {'word': 'imageflip', 'menu': 'Flips an image using a given mode', 'kind': '[f]', 'abbr': 'imageflip()'}, {'word': 'imageantialias', 'menu': 'Should antialias functions be used or not', 'kind': '[f]', 'abbr': 'imageantialias()'}, {'word': 'imagecrop', 'menu': 'Crop an image using the given coordinates and size, x, y, width and height', 'kind': '[f]', 'abbr': 'imagecrop()'}, {'word': 'imagecropauto', 'menu': 'Crop an image automatically using one of the available modes', 'kind': '[f]', 'abbr': 'imagecropauto()'}, {'word': 'imagescale', 'menu': 'Scale an image using the given new width and height', 'kind': '[f]', 'abbr': 'imagescale()'}, {'word': 'imageaffine', 'menu': 'Return an image containing the affine transformed src image, using an optional clipping area', 'kind': '[f]', 'abbr': 'imageaffine()'}, {'word': 'imageaffinematrixconcat', 'menu': 'Concatenate two affine transformation matrices', 'kind': '[f]', 'abbr': 'imageaffinematrixconcat()'}, {'word': 'imageaffinematrixget', 'menu': 'Get an affine transformation matrix', 'kind': '[f]', 'abbr': 'imageaffinematrixget()'}, {'word': 'imagesetinterpolation', 'menu': 'Set the interpolation method', 'kind': '[f]', 'abbr': 'imagesetinterpolation()'}, {'word': 'imagesettile', 'menu': 'Set the tile image for filling', 'kind': '[f]', 'abbr': 'imagesettile()'}, {'word': 'imagesetbrush', 'menu': 'Set the brush image for line drawing', 'kind': '[f]', 'abbr': 'imagesetbrush()'}, {'word': 'imagesetstyle', 'menu': 'Set the style for line drawing', 'kind': '[f]', 'abbr': 'imagesetstyle()'}, {'word': 'imagecreatefrompng', 'menu': '&gd.image.new;', 'kind': '[f]', 'abbr': 'imagecreatefrompng()'}, {'word': 'imagecreatefromgif', 'menu': '&gd.image.new;', 'kind': '[f]', 'abbr': 'imagecreatefromgif()'}, {'word': 'imagecreatefromjpeg', 'menu': '&gd.image.new;', 'kind': '[f]', 'abbr': 'imagecreatefromjpeg()'}, {'word': 'imagecreatefromwbmp', 'menu': '&gd.image.new;', 'kind': '[f]', 'abbr': 'imagecreatefromwbmp()'}, {'word': 'imagecreatefromxbm', 'menu': '&gd.image.new;', 'kind': '[f]', 'abbr': 'imagecreatefromxbm()'}, {'word': 'imagecreatefromgd', 'menu': 'Create a new image from GD file or URL', 'kind': '[f]', 'abbr': 'imagecreatefromgd()'}, {'word': 'imagecreatefromgd2', 'menu': 'Create a new image from GD2 file or URL', 'kind': '[f]', 'abbr': 'imagecreatefromgd2()'}, {'word': 'imagecreatefromgd2part', 'menu': 'Create a new image from a given part of GD2 file or URL', 'kind': '[f]', 'abbr': 'imagecreatefromgd2part()'}, {'word': 'imagepng', 'menu': 'Output a PNG image to either the browser or a file', 'kind': '[f]', 'abbr': 'imagepng()'}, {'word': 'imagegif', 'menu': '&gd.image.output;', 'kind': '[f]', 'abbr': 'imagegif()'}, {'word': 'imagejpeg', 'menu': '&gd.image.output;', 'kind': '[f]', 'abbr': 'imagejpeg()'}, {'word': 'imagewbmp', 'menu': '&gd.image.output;', 'kind': '[f]', 'abbr': 'imagewbmp()'}, {'word': 'imagegd', 'menu': 'Output GD image to browser or file', 'kind': '[f]', 'abbr': 'imagegd()'}, {'word': 'imagegd2', 'menu': 'Output GD2 image to browser or file', 'kind': '[f]', 'abbr': 'imagegd2()'}, {'word': 'imagedestroy', 'menu': 'Destroy an image', 'kind': '[f]', 'abbr': 'imagedestroy()'}, {'word': 'imagegammacorrect', 'menu': 'Apply a gamma correction to a GD image', 'kind': '[f]', 'abbr': 'imagegammacorrect()'}, {'word': 'imagefill', 'menu': 'Flood fill', 'kind': '[f]', 'abbr': 'imagefill()'}, {'word': 'imagefilledpolygon', 'menu': 'Draw a filled polygon', 'kind': '[f]', 'abbr': 'imagefilledpolygon()'}, {'word': 'imagefilledrectangle', 'menu': 'Draw a filled rectangle', 'kind': '[f]', 'abbr': 'imagefilledrectangle()'}, {'word': 'imagefilltoborder', 'menu': 'Flood fill to specific color', 'kind': '[f]', 'abbr': 'imagefilltoborder()'}, {'word': 'imagefontwidth', 'menu': 'Get font width', 'kind': '[f]', 'abbr': 'imagefontwidth()'}, {'word': 'imagefontheight', 'menu': 'Get font height', 'kind': '[f]', 'abbr': 'imagefontheight()'}, {'word': 'imageinterlace', 'menu': 'Enable or disable interlace', 'kind': '[f]', 'abbr': 'imageinterlace()'}, {'word': 'imageline', 'menu': 'Draw a line', 'kind': '[f]', 'abbr': 'imageline()'}, {'word': 'imageloadfont', 'menu': 'Load a new font', 'kind': '[f]', 'abbr': 'imageloadfont()'}, {'word': 'imagepolygon', 'menu': 'Draws a polygon', 'kind': '[f]', 'abbr': 'imagepolygon()'}, {'word': 'imagerectangle', 'menu': 'Draw a rectangle', 'kind': '[f]', 'abbr': 'imagerectangle()'}, {'word': 'imagesetpixel', 'menu': 'Set a single pixel', 'kind': '[f]', 'abbr': 'imagesetpixel()'}, {'word': 'imagestring', 'menu': 'Draw a string horizontally', 'kind': '[f]', 'abbr': 'imagestring()'}, {'word': 'imagestringup', 'menu': 'Draw a string vertically', 'kind': '[f]', 'abbr': 'imagestringup()'}, {'word': 'imagesx', 'menu': 'Get image width', 'kind': '[f]', 'abbr': 'imagesx()'}, {'word': 'imagesy', 'menu': 'Get image height', 'kind': '[f]', 'abbr': 'imagesy()'}, {'word': 'imagedashedline', 'menu': 'Draw a dashed line', 'kind': '[f]', 'abbr': 'imagedashedline()'}, {'word': 'imagettfbbox', 'menu': 'Give the bounding box of a text using TrueType fonts', 'kind': '[f]', 'abbr': 'imagettfbbox()'}, {'word': 'imagettftext', 'menu': 'Write text to the image using TrueType fonts', 'kind': '[f]', 'abbr': 'imagettftext()'}, {'word': 'imageftbbox', 'menu': 'Give the bounding box of a text using fonts via freetype2', 'kind': '[f]', 'abbr': 'imageftbbox()'}, {'word': 'imagefttext', 'menu': 'Write text to the image using fonts using FreeType 2', 'kind': '[f]', 'abbr': 'imagefttext()'}, {'word': 'imagetypes', 'menu': 'Return the image types supported by this PHP build', 'kind': '[f]', 'abbr': 'imagetypes()'}, {'word': 'jpeg2wbmp', 'menu': 'Convert JPEG image file to WBMP image file', 'kind': '[f]', 'abbr': 'jpeg2wbmp()'}, {'word': 'png2wbmp', 'menu': 'Convert PNG image file to WBMP image file', 'kind': '[f]', 'abbr': 'png2wbmp()'}, {'word': 'image2wbmp', 'menu': '&gd.image.output;', 'kind': '[f]', 'abbr': 'image2wbmp()'}, {'word': 'imagelayereffect', 'menu': 'Set the alpha blending flag to use layering effects', 'kind': '[f]', 'abbr': 'imagelayereffect()'}, {'word': 'imagexbm', 'menu': 'Output an XBM image to browser or file', 'kind': '[f]', 'abbr': 'imagexbm()'}, {'word': 'imagecolormatch', 'menu': 'Makes the colors of the palette version of an image more closely match the true color version', 'kind': '[f]', 'abbr': 'imagecolormatch()'}, {'word': 'imagefilter', 'menu': 'Applies a filter to an image', 'kind': '[f]', 'abbr': 'imagefilter()'}, {'word': 'imageconvolution', 'menu': 'Apply a 3x3 convolution matrix, using coefficient and offset', 'kind': '[f]', 'abbr': 'imageconvolution()'}, {'word': 'textdomain', 'menu': 'Sets the default domain', 'kind': '[f]', 'abbr': 'textdomain()'}, {'word': 'gettext', 'menu': 'Get the text being scanned', 'kind': '[f]', 'abbr': 'gettext()'}, {'word': 'dgettext', 'menu': 'Override the current domain', 'kind': '[f]', 'abbr': 'dgettext()'}, {'word': 'dcgettext', 'menu': 'Overrides the domain for a single lookup', 'kind': '[f]', 'abbr': 'dcgettext()'}, {'word': 'bindtextdomain', 'menu': 'Sets the path for a domain', 'kind': '[f]', 'abbr': 'bindtextdomain()'}, {'word': 'ngettext', 'menu': 'Plural version of gettext', 'kind': '[f]', 'abbr': 'ngettext()'}, {'word': 'dngettext', 'menu': 'Plural version of dgettext', 'kind': '[f]', 'abbr': 'dngettext()'}, {'word': 'dcngettext', 'menu': 'Plural version of dcgettext', 'kind': '[f]', 'abbr': 'dcngettext()'}, {'word': 'bind_textdomain_codeset', 'menu': 'Specify the character encoding in which the messages from the DOMAIN message catalog will be returned', 'kind': '[f]', 'abbr': 'bind_textdomain_codeset()'}, {'word': 'hash', 'menu': 'Generate a hash value (message digest)', 'kind': '[f]', 'abbr': 'hash()'}, {'word': 'hash_file', 'menu': 'Generate a hash value using the contents of a given file', 'kind': '[f]', 'abbr': 'hash_file()'}, {'word': 'hash_hmac', 'menu': 'Generate a keyed hash value using the HMAC method', 'kind': '[f]', 'abbr': 'hash_hmac()'}, {'word': 'hash_hmac_file', 'menu': 'Generate a keyed hash value using the HMAC method and the contents of a given file', 'kind': '[f]', 'abbr': 'hash_hmac_file()'}, {'word': 'hash_init', 'menu': 'Initialize an incremental hashing context', 'kind': '[f]', 'abbr': 'hash_init()'}, {'word': 'hash_update', 'menu': 'Pump data into an active hashing context', 'kind': '[f]', 'abbr': 'hash_update()'}, {'word': 'hash_update_stream', 'menu': 'Pump data into an active hashing context from an open stream', 'kind': '[f]', 'abbr': 'hash_update_stream()'}, {'word': 'hash_update_file', 'menu': 'Pump data into an active hashing context from a file', 'kind': '[f]', 'abbr': 'hash_update_file()'}, {'word': 'hash_final', 'menu': 'Finalize an incremental hash and return resulting digest', 'kind': '[f]', 'abbr': 'hash_final()'}, {'word': 'hash_copy', 'menu': 'Copy hashing context', 'kind': '[f]', 'abbr': 'hash_copy()'}, {'word': 'hash_algos', 'menu': 'Return a list of registered hashing algorithms', 'kind': '[f]', 'abbr': 'hash_algos()'}, {'word': 'hash_pbkdf2', 'menu': 'Generate a PBKDF2 key derivation of a supplied password', 'kind': '[f]', 'abbr': 'hash_pbkdf2()'}, {'word': 'hash_equals', 'menu': 'Timing attack safe string comparison', 'kind': '[f]', 'abbr': 'hash_equals()'}, {'word': 'mhash_keygen_s2k', 'menu': 'Generates a key', 'kind': '[f]', 'abbr': 'mhash_keygen_s2k()'}, {'word': 'mhash_get_block_size', 'menu': 'Gets the block size of the specified hash', 'kind': '[f]', 'abbr': 'mhash_get_block_size()'}, {'word': 'mhash_get_hash_name', 'menu': 'Gets the name of the specified hash', 'kind': '[f]', 'abbr': 'mhash_get_hash_name()'}, {'word': 'mhash_count', 'menu': 'Gets the highest available hash ID', 'kind': '[f]', 'abbr': 'mhash_count()'}, {'word': 'mhash', 'menu': 'Computes hash', 'kind': '[f]', 'abbr': 'mhash()'}, {'word': 'iconv', 'menu': 'Convert string to requested character encoding', 'kind': '[f]', 'abbr': 'iconv()'}, {'word': 'iconv_get_encoding', 'menu': 'Retrieve internal configuration variables of iconv extension', 'kind': '[f]', 'abbr': 'iconv_get_encoding()'}, {'word': 'iconv_set_encoding', 'menu': 'Set current setting for character encoding conversion', 'kind': '[f]', 'abbr': 'iconv_set_encoding()'}, {'word': 'iconv_strlen', 'menu': 'Returns the character count of string', 'kind': '[f]', 'abbr': 'iconv_strlen()'}, {'word': 'iconv_substr', 'menu': 'Cut out part of a string', 'kind': '[f]', 'abbr': 'iconv_substr()'}, {'word': 'iconv_strpos', 'menu': 'Finds position of first occurrence of a needle within a haystack', 'kind': '[f]', 'abbr': 'iconv_strpos()'}, {'word': 'iconv_strrpos', 'menu': 'Finds the last occurrence of a needle within a haystack', 'kind': '[f]', 'abbr': 'iconv_strrpos()'}, {'word': 'iconv_mime_encode', 'menu': 'Composes a MIME header field', 'kind': '[f]', 'abbr': 'iconv_mime_encode()'}, {'word': 'iconv_mime_decode', 'menu': 'Decodes a MIME header field', 'kind': '[f]', 'abbr': 'iconv_mime_decode()'}, {'word': 'iconv_mime_decode_headers', 'menu': 'Decodes multiple MIME header fields at once', 'kind': '[f]', 'abbr': 'iconv_mime_decode_headers()'}, {'word': 'json_encode', 'menu': 'Returns the JSON representation of a value', 'kind': '[f]', 'abbr': 'json_encode()'}, {'word': 'json_decode', 'menu': 'Decodes a JSON string', 'kind': '[f]', 'abbr': 'json_decode()'}, {'word': 'json_last_error', 'menu': 'Returns the last error occurred', 'kind': '[f]', 'abbr': 'json_last_error()'}, {'word': 'json_last_error_msg', 'menu': 'Returns the error string of the last json_encode() or json_decode() call', 'kind': '[f]', 'abbr': 'json_last_error_msg()'}, {'word': 'ldap_connect', 'menu': 'Connect to an LDAP server', 'kind': '[f]', 'abbr': 'ldap_connect()'}, {'word': 'ldap_close', 'menu': '&Alias; ldap_unbind', 'kind': '[f]', 'abbr': 'ldap_close()'}, {'word': 'ldap_bind', 'menu': 'Bind to LDAP directory', 'kind': '[f]', 'abbr': 'ldap_bind()'}, {'word': 'ldap_sasl_bind', 'menu': 'Bind to LDAP directory using SASL', 'kind': '[f]', 'abbr': 'ldap_sasl_bind()'}, {'word': 'ldap_unbind', 'menu': 'Unbind from LDAP directory', 'kind': '[f]', 'abbr': 'ldap_unbind()'}, {'word': 'ldap_read', 'menu': 'Read an entry', 'kind': '[f]', 'abbr': 'ldap_read()'}, {'word': 'ldap_list', 'menu': 'Single-level search', 'kind': '[f]', 'abbr': 'ldap_list()'}, {'word': 'ldap_search', 'menu': 'Search LDAP tree', 'kind': '[f]', 'abbr': 'ldap_search()'}, {'word': 'ldap_free_result', 'menu': 'Free result memory', 'kind': '[f]', 'abbr': 'ldap_free_result()'}, {'word': 'ldap_count_entries', 'menu': 'Count the number of entries in a search', 'kind': '[f]', 'abbr': 'ldap_count_entries()'}, {'word': 'ldap_first_entry', 'menu': 'Return first result id', 'kind': '[f]', 'abbr': 'ldap_first_entry()'}, {'word': 'ldap_next_entry', 'menu': 'Get next result entry', 'kind': '[f]', 'abbr': 'ldap_next_entry()'}, {'word': 'ldap_get_entries', 'menu': 'Get all result entries', 'kind': '[f]', 'abbr': 'ldap_get_entries()'}, {'word': 'ldap_first_attribute', 'menu': 'Return first attribute', 'kind': '[f]', 'abbr': 'ldap_first_attribute()'}, {'word': 'ldap_next_attribute', 'menu': 'Get the next attribute in result', 'kind': '[f]', 'abbr': 'ldap_next_attribute()'}, {'word': 'ldap_get_attributes', 'menu': 'Get attributes from a search result entry', 'kind': '[f]', 'abbr': 'ldap_get_attributes()'}, {'word': 'ldap_get_values', 'menu': 'Get all values from a result entry', 'kind': '[f]', 'abbr': 'ldap_get_values()'}, {'word': 'ldap_get_values_len', 'menu': 'Get all binary values from a result entry', 'kind': '[f]', 'abbr': 'ldap_get_values_len()'}, {'word': 'ldap_get_dn', 'menu': 'Get the DN of a result entry', 'kind': '[f]', 'abbr': 'ldap_get_dn()'}, {'word': 'ldap_explode_dn', 'menu': 'Splits DN into its component parts', 'kind': '[f]', 'abbr': 'ldap_explode_dn()'}, {'word': 'ldap_dn2ufn', 'menu': 'Convert DN to User Friendly Naming format', 'kind': '[f]', 'abbr': 'ldap_dn2ufn()'}, {'word': 'ldap_add', 'menu': 'Add entries to LDAP directory', 'kind': '[f]', 'abbr': 'ldap_add()'}, {'word': 'ldap_delete', 'menu': 'Delete an entry from a directory', 'kind': '[f]', 'abbr': 'ldap_delete()'}, {'word': 'ldap_modify_batch', 'menu': 'Batch and execute modifications on an LDAP entry', 'kind': '[f]', 'abbr': 'ldap_modify_batch()'}, {'word': 'ldap_modify', 'menu': 'Modify an LDAP entry', 'kind': '[f]', 'abbr': 'ldap_modify()'}, {'word': 'ldap_mod_add', 'menu': 'Add attribute values to current attributes', 'kind': '[f]', 'abbr': 'ldap_mod_add()'}, {'word': 'ldap_mod_replace', 'menu': 'Replace attribute values with new ones', 'kind': '[f]', 'abbr': 'ldap_mod_replace()'}, {'word': 'ldap_mod_del', 'menu': 'Delete attribute values from current attributes', 'kind': '[f]', 'abbr': 'ldap_mod_del()'}, {'word': 'ldap_errno', 'menu': 'Return the LDAP error number of the last LDAP command', 'kind': '[f]', 'abbr': 'ldap_errno()'}, {'word': 'ldap_err2str', 'menu': 'Convert LDAP error number into string error message', 'kind': '[f]', 'abbr': 'ldap_err2str()'}, {'word': 'ldap_error', 'menu': 'Return the LDAP error message of the last LDAP command', 'kind': '[f]', 'abbr': 'ldap_error()'}, {'word': 'ldap_compare', 'menu': 'Compare value of attribute found in entry specified with DN', 'kind': '[f]', 'abbr': 'ldap_compare()'}, {'word': 'ldap_sort', 'menu': 'Sort LDAP result entries on the client side', 'kind': '[f]', 'abbr': 'ldap_sort()'}, {'word': 'ldap_rename', 'menu': 'Modify the name of an entry', 'kind': '[f]', 'abbr': 'ldap_rename()'}, {'word': 'ldap_get_option', 'menu': 'Get the current value for given option', 'kind': '[f]', 'abbr': 'ldap_get_option()'}, {'word': 'ldap_set_option', 'menu': 'Set the value of the given option', 'kind': '[f]', 'abbr': 'ldap_set_option()'}, {'word': 'ldap_first_reference', 'menu': 'Return first reference', 'kind': '[f]', 'abbr': 'ldap_first_reference()'}, {'word': 'ldap_next_reference', 'menu': 'Get next reference', 'kind': '[f]', 'abbr': 'ldap_next_reference()'}, {'word': 'ldap_parse_reference', 'menu': 'Extract information from reference entry', 'kind': '[f]', 'abbr': 'ldap_parse_reference()'}, {'word': 'ldap_parse_result', 'menu': 'Extract information from result', 'kind': '[f]', 'abbr': 'ldap_parse_result()'}, {'word': 'ldap_start_tls', 'menu': 'Start TLS', 'kind': '[f]', 'abbr': 'ldap_start_tls()'}, {'word': 'ldap_set_rebind_proc', 'menu': 'Set a callback function to do re-binds on referral chasing', 'kind': '[f]', 'abbr': 'ldap_set_rebind_proc()'}, {'word': 'ldap_escape', 'menu': 'Escape a string for use in an LDAP filter or DN', 'kind': '[f]', 'abbr': 'ldap_escape()'}, {'word': 'ldap_control_paged_result', 'menu': 'Send LDAP pagination control', 'kind': '[f]', 'abbr': 'ldap_control_paged_result()'}, {'word': 'ldap_control_paged_result_response', 'menu': 'Retrieve the LDAP pagination cookie', 'kind': '[f]', 'abbr': 'ldap_control_paged_result_response()'}, {'word': 'mb_convert_case', 'menu': 'Perform case folding on a string', 'kind': '[f]', 'abbr': 'mb_convert_case()'}, {'word': 'mb_strtoupper', 'menu': 'Make a string uppercase', 'kind': '[f]', 'abbr': 'mb_strtoupper()'}, {'word': 'mb_strtolower', 'menu': 'Make a string lowercase', 'kind': '[f]', 'abbr': 'mb_strtolower()'}, {'word': 'mb_language', 'menu': 'Set/Get current language', 'kind': '[f]', 'abbr': 'mb_language()'}, {'word': 'mb_internal_encoding', 'menu': 'Set/Get internal character encoding', 'kind': '[f]', 'abbr': 'mb_internal_encoding()'}, {'word': 'mb_http_input', 'menu': 'Detect HTTP input character encoding', 'kind': '[f]', 'abbr': 'mb_http_input()'}, {'word': 'mb_http_output', 'menu': 'Set/Get HTTP output character encoding', 'kind': '[f]', 'abbr': 'mb_http_output()'}, {'word': 'mb_detect_order', 'menu': 'Set/Get character encoding detection order', 'kind': '[f]', 'abbr': 'mb_detect_order()'}, {'word': 'mb_substitute_character', 'menu': 'Set/Get substitution character', 'kind': '[f]', 'abbr': 'mb_substitute_character()'}, {'word': 'mb_parse_str', 'menu': 'Parse GET/POST/COOKIE data and set global variable', 'kind': '[f]', 'abbr': 'mb_parse_str()'}, {'word': 'mb_output_handler', 'menu': 'Callback function converts character encoding in output buffer', 'kind': '[f]', 'abbr': 'mb_output_handler()'}, {'word': 'mb_preferred_mime_name', 'menu': 'Get MIME charset string', 'kind': '[f]', 'abbr': 'mb_preferred_mime_name()'}, {'word': 'mb_strlen', 'menu': 'Get string length', 'kind': '[f]', 'abbr': 'mb_strlen()'}, {'word': 'mb_strpos', 'menu': 'Find position of first occurrence of string in a string', 'kind': '[f]', 'abbr': 'mb_strpos()'}, {'word': 'mb_strrpos', 'menu': 'Find position of last occurrence of a string in a string', 'kind': '[f]', 'abbr': 'mb_strrpos()'}, {'word': 'mb_stripos', 'menu': 'Finds position of first occurrence of a string within another, case insensitive', 'kind': '[f]', 'abbr': 'mb_stripos()'}, {'word': 'mb_strripos', 'menu': 'Finds position of last occurrence of a string within another, case insensitive', 'kind': '[f]', 'abbr': 'mb_strripos()'}, {'word': 'mb_strstr', 'menu': 'Finds first occurrence of a string within another', 'kind': '[f]', 'abbr': 'mb_strstr()'}, {'word': 'mb_strrchr', 'menu': 'Finds the last occurrence of a character in a string within another', 'kind': '[f]', 'abbr': 'mb_strrchr()'}, {'word': 'mb_stristr', 'menu': 'Finds first occurrence of a string within another, case insensitive', 'kind': '[f]', 'abbr': 'mb_stristr()'}, {'word': 'mb_strrichr', 'menu': 'Finds the last occurrence of a character in a string within another, case insensitive', 'kind': '[f]', 'abbr': 'mb_strrichr()'}, {'word': 'mb_substr_count', 'menu': 'Count the number of substring occurrences', 'kind': '[f]', 'abbr': 'mb_substr_count()'}, {'word': 'mb_substr', 'menu': 'Get part of string', 'kind': '[f]', 'abbr': 'mb_substr()'}, {'word': 'mb_strcut', 'menu': 'Get part of string', 'kind': '[f]', 'abbr': 'mb_strcut()'}, {'word': 'mb_strwidth', 'menu': 'Return width of string', 'kind': '[f]', 'abbr': 'mb_strwidth()'}, {'word': 'mb_strimwidth', 'menu': 'Get truncated string with specified width', 'kind': '[f]', 'abbr': 'mb_strimwidth()'}, {'word': 'mb_convert_encoding', 'menu': 'Convert character encoding', 'kind': '[f]', 'abbr': 'mb_convert_encoding()'}, {'word': 'mb_detect_encoding', 'menu': 'Detect character encoding', 'kind': '[f]', 'abbr': 'mb_detect_encoding()'}, {'word': 'mb_list_encodings', 'menu': 'Returns an array of all supported encodings', 'kind': '[f]', 'abbr': 'mb_list_encodings()'}, {'word': 'mb_encoding_aliases', 'menu': 'Get aliases of a known encoding type', 'kind': '[f]', 'abbr': 'mb_encoding_aliases()'}, {'word': 'mb_convert_kana', 'menu': 'Convert "kana" one from another ("zen-kaku", "han-kaku" and more)', 'kind': '[f]', 'abbr': 'mb_convert_kana()'}, {'word': 'mb_encode_mimeheader', 'menu': 'Encode string for MIME header', 'kind': '[f]', 'abbr': 'mb_encode_mimeheader()'}, {'word': 'mb_decode_mimeheader', 'menu': 'Decode string in MIME header field', 'kind': '[f]', 'abbr': 'mb_decode_mimeheader()'}, {'word': 'mb_convert_variables', 'menu': 'Convert character code in variable(s)', 'kind': '[f]', 'abbr': 'mb_convert_variables()'}, {'word': 'mb_encode_numericentity', 'menu': 'Encode character to HTML numeric string reference', 'kind': '[f]', 'abbr': 'mb_encode_numericentity()'}, {'word': 'mb_decode_numericentity', 'menu': 'Decode HTML numeric string reference to character', 'kind': '[f]', 'abbr': 'mb_decode_numericentity()'}, {'word': 'mb_send_mail', 'menu': 'Send encoded mail', 'kind': '[f]', 'abbr': 'mb_send_mail()'}, {'word': 'mb_get_info', 'menu': 'Get internal settings of mbstring', 'kind': '[f]', 'abbr': 'mb_get_info()'}, {'word': 'mb_check_encoding', 'menu': 'Check if the string is valid for the specified encoding', 'kind': '[f]', 'abbr': 'mb_check_encoding()'}, {'word': 'mb_regex_encoding', 'menu': 'Set/Get character encoding for multibyte regex', 'kind': '[f]', 'abbr': 'mb_regex_encoding()'}, {'word': 'mb_regex_set_options', 'menu': 'Set/Get the default options for mbregex functions', 'kind': '[f]', 'abbr': 'mb_regex_set_options()'}, {'word': 'mb_ereg', 'menu': 'Regular expression match with multibyte support', 'kind': '[f]', 'abbr': 'mb_ereg()'}, {'word': 'mb_eregi', 'menu': 'Regular expression match ignoring case with multibyte support', 'kind': '[f]', 'abbr': 'mb_eregi()'}, {'word': 'mb_ereg_replace', 'menu': 'Replace regular expression with multibyte support', 'kind': '[f]', 'abbr': 'mb_ereg_replace()'}, {'word': 'mb_eregi_replace', 'menu': 'Replace regular expression with multibyte support ignoring case', 'kind': '[f]', 'abbr': 'mb_eregi_replace()'}, {'word': 'mb_ereg_replace_callback', 'menu': 'Perform a regular expresssion seach and replace with multibyte support using a callback', 'kind': '[f]', 'abbr': 'mb_ereg_replace_callback()'}, {'word': 'mb_split', 'menu': 'Split multibyte string using regular expression', 'kind': '[f]', 'abbr': 'mb_split()'}, {'word': 'mb_ereg_match', 'menu': 'Regular expression match for multibyte string', 'kind': '[f]', 'abbr': 'mb_ereg_match()'}, {'word': 'mb_ereg_search', 'menu': 'Multibyte regular expression match for predefined multibyte string', 'kind': '[f]', 'abbr': 'mb_ereg_search()'}, {'word': 'mb_ereg_search_pos', 'menu': 'Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string', 'kind': '[f]', 'abbr': 'mb_ereg_search_pos()'}, {'word': 'mb_ereg_search_regs', 'menu': 'Returns the matched part of a multibyte regular expression', 'kind': '[f]', 'abbr': 'mb_ereg_search_regs()'}, {'word': 'mb_ereg_search_init', 'menu': 'Setup string and regular expression for a multibyte regular expression match', 'kind': '[f]', 'abbr': 'mb_ereg_search_init()'}, {'word': 'mb_ereg_search_getregs', 'menu': 'Retrieve the result from the last multibyte regular expression match', 'kind': '[f]', 'abbr': 'mb_ereg_search_getregs()'}, {'word': 'mb_ereg_search_getpos', 'menu': 'Returns start point for next regular expression match', 'kind': '[f]', 'abbr': 'mb_ereg_search_getpos()'}, {'word': 'mb_ereg_search_setpos', 'menu': 'Set start point of next regular expression match', 'kind': '[f]', 'abbr': 'mb_ereg_search_setpos()'}, {'word': 'mysql_connect', 'menu': 'Open a connection to a MySQL Server', 'kind': '[f]', 'abbr': 'mysql_connect()'}, {'word': 'mysql_pconnect', 'menu': 'Open a persistent connection to a MySQL server', 'kind': '[f]', 'abbr': 'mysql_pconnect()'}, {'word': 'mysql_close', 'menu': 'Close MySQL connection', 'kind': '[f]', 'abbr': 'mysql_close()'}, {'word': 'mysql_select_db', 'menu': 'Select a MySQL database', 'kind': '[f]', 'abbr': 'mysql_select_db()'}, {'word': 'mysql_query', 'menu': 'Send a MySQL query', 'kind': '[f]', 'abbr': 'mysql_query()'}, {'word': 'mysql_unbuffered_query', 'menu': 'Send an SQL query to MySQL without fetching and buffering the result rows.', 'kind': '[f]', 'abbr': 'mysql_unbuffered_query()'}, {'word': 'mysql_db_query', 'menu': 'Selects a database and executes a query on it', 'kind': '[f]', 'abbr': 'mysql_db_query()'}, {'word': 'mysql_list_dbs', 'menu': 'List databases available on a MySQL server', 'kind': '[f]', 'abbr': 'mysql_list_dbs()'}, {'word': 'mysql_list_tables', 'menu': 'List tables in a MySQL database', 'kind': '[f]', 'abbr': 'mysql_list_tables()'}, {'word': 'mysql_list_fields', 'menu': 'List MySQL table fields', 'kind': '[f]', 'abbr': 'mysql_list_fields()'}, {'word': 'mysql_list_processes', 'menu': 'List MySQL processes', 'kind': '[f]', 'abbr': 'mysql_list_processes()'}, {'word': 'mysql_error', 'menu': 'Returns the text of the error message from previous MySQL operation', 'kind': '[f]', 'abbr': 'mysql_error()'}, {'word': 'mysql_errno', 'menu': 'Returns the numerical value of the error message from previous MySQL operation', 'kind': '[f]', 'abbr': 'mysql_errno()'}, {'word': 'mysql_affected_rows', 'menu': 'Get number of affected rows in previous MySQL operation', 'kind': '[f]', 'abbr': 'mysql_affected_rows()'}, {'word': 'mysql_insert_id', 'menu': 'Get the ID generated in the last query', 'kind': '[f]', 'abbr': 'mysql_insert_id()'}, {'word': 'mysql_result', 'menu': 'Get result data', 'kind': '[f]', 'abbr': 'mysql_result()'}, {'word': 'mysql_num_rows', 'menu': 'Get number of rows in result', 'kind': '[f]', 'abbr': 'mysql_num_rows()'}, {'word': 'mysql_num_fields', 'menu': 'Get number of fields in result', 'kind': '[f]', 'abbr': 'mysql_num_fields()'}, {'word': 'mysql_fetch_row', 'menu': 'Get a result row as an enumerated array', 'kind': '[f]', 'abbr': 'mysql_fetch_row()'}, {'word': 'mysql_fetch_array', 'menu': 'Fetch a result row as an associative array, a numeric array, or both', 'kind': '[f]', 'abbr': 'mysql_fetch_array()'}, {'word': 'mysql_fetch_assoc', 'menu': 'Fetch a result row as an associative array', 'kind': '[f]', 'abbr': 'mysql_fetch_assoc()'}, {'word': 'mysql_fetch_object', 'menu': 'Fetch a result row as an object', 'kind': '[f]', 'abbr': 'mysql_fetch_object()'}, {'word': 'mysql_data_seek', 'menu': 'Move internal result pointer', 'kind': '[f]', 'abbr': 'mysql_data_seek()'}, {'word': 'mysql_fetch_lengths', 'menu': 'Get the length of each output in a result', 'kind': '[f]', 'abbr': 'mysql_fetch_lengths()'}, {'word': 'mysql_fetch_field', 'menu': 'Get column information from a result and return as an object', 'kind': '[f]', 'abbr': 'mysql_fetch_field()'}, {'word': 'mysql_field_seek', 'menu': 'Set result pointer to a specified field offset', 'kind': '[f]', 'abbr': 'mysql_field_seek()'}, {'word': 'mysql_free_result', 'menu': 'Free result memory', 'kind': '[f]', 'abbr': 'mysql_free_result()'}, {'word': 'mysql_field_name', 'menu': 'Get the name of the specified field in a result', 'kind': '[f]', 'abbr': 'mysql_field_name()'}, {'word': 'mysql_field_table', 'menu': 'Get name of the table the specified field is in', 'kind': '[f]', 'abbr': 'mysql_field_table()'}, {'word': 'mysql_field_len', 'menu': 'Returns the length of the specified field', 'kind': '[f]', 'abbr': 'mysql_field_len()'}, {'word': 'mysql_field_type', 'menu': 'Get the type of the specified field in a result', 'kind': '[f]', 'abbr': 'mysql_field_type()'}, {'word': 'mysql_field_flags', 'menu': 'Get the flags associated with the specified field in a result', 'kind': '[f]', 'abbr': 'mysql_field_flags()'}, {'word': 'mysql_escape_string', 'menu': 'Escapes a string for use in a mysql_query', 'kind': '[f]', 'abbr': 'mysql_escape_string()'}, {'word': 'mysql_real_escape_string', 'menu': 'Escapes special characters in a string for use in an SQL statement', 'kind': '[f]', 'abbr': 'mysql_real_escape_string()'}, {'word': 'mysql_stat', 'menu': 'Get current system status', 'kind': '[f]', 'abbr': 'mysql_stat()'}, {'word': 'mysql_thread_id', 'menu': 'Return the current thread ID', 'kind': '[f]', 'abbr': 'mysql_thread_id()'}, {'word': 'mysql_client_encoding', 'menu': 'Returns the name of the character set', 'kind': '[f]', 'abbr': 'mysql_client_encoding()'}, {'word': 'mysql_ping', 'menu': 'Ping a server connection or reconnect if there is no connection', 'kind': '[f]', 'abbr': 'mysql_ping()'}, {'word': 'mysql_get_client_info', 'menu': 'Get MySQL client info', 'kind': '[f]', 'abbr': 'mysql_get_client_info()'}, {'word': 'mysql_get_host_info', 'menu': 'Get MySQL host info', 'kind': '[f]', 'abbr': 'mysql_get_host_info()'}, {'word': 'mysql_get_proto_info', 'menu': 'Get MySQL protocol info', 'kind': '[f]', 'abbr': 'mysql_get_proto_info()'}, {'word': 'mysql_get_server_info', 'menu': 'Get MySQL server info', 'kind': '[f]', 'abbr': 'mysql_get_server_info()'}, {'word': 'mysql_info', 'menu': 'Get information about the most recent query', 'kind': '[f]', 'abbr': 'mysql_info()'}, {'word': 'mysql_set_charset', 'menu': 'Sets the client character set', 'kind': '[f]', 'abbr': 'mysql_set_charset()'}, {'word': 'mysql_db_name', 'menu': 'Retrieves database name from the call to mysql_list_dbs', 'kind': '[f]', 'abbr': 'mysql_db_name()'}, {'word': 'mysql_tablename', 'menu': 'Get table name of field', 'kind': '[f]', 'abbr': 'mysql_tablename()'}, {'word': 'mysqli_connect', 'menu': '&Alias; mysqli::__construct', 'kind': '[f]', 'abbr': 'mysqli_connect()'}, {'word': 'mysqli_execute', 'menu': 'Alias for mysqli_stmt_execute', 'kind': '[f]', 'abbr': 'mysqli_execute()'}, {'word': 'mysqli_get_links_stats', 'menu': 'Return information about open and cached links', 'kind': '[f]', 'abbr': 'mysqli_get_links_stats()'}, {'word': 'mysqli_report', 'menu': '&Alias; mysqli_driver->report_mode', 'kind': '[f]', 'abbr': 'mysqli_report()'}, {'word': 'mysqli_escape_string', 'menu': '&Alias; mysqli_real_escape_string', 'kind': '[f]', 'abbr': 'mysqli_escape_string()'}, {'word': 'mysqli_set_opt', 'menu': 'Alias of mysqli_options', 'kind': '[f]', 'abbr': 'mysqli_set_opt()'}, {'word': 'odbc_autocommit', 'menu': 'Toggle autocommit behaviour', 'kind': '[f]', 'abbr': 'odbc_autocommit()'}, {'word': 'odbc_binmode', 'menu': 'Handling of binary column data', 'kind': '[f]', 'abbr': 'odbc_binmode()'}, {'word': 'odbc_close', 'menu': 'Close an ODBC connection', 'kind': '[f]', 'abbr': 'odbc_close()'}, {'word': 'odbc_close_all', 'menu': 'Close all ODBC connections', 'kind': '[f]', 'abbr': 'odbc_close_all()'}, {'word': 'odbc_columns', 'menu': 'Lists the column names in specified tables', 'kind': '[f]', 'abbr': 'odbc_columns()'}, {'word': 'odbc_commit', 'menu': 'Commit an ODBC transaction', 'kind': '[f]', 'abbr': 'odbc_commit()'}, {'word': 'odbc_connect', 'menu': 'Connect to a datasource', 'kind': '[f]', 'abbr': 'odbc_connect()'}, {'word': 'odbc_cursor', 'menu': 'Get cursorname', 'kind': '[f]', 'abbr': 'odbc_cursor()'}, {'word': 'odbc_data_source', 'menu': 'Returns information about a current connection', 'kind': '[f]', 'abbr': 'odbc_data_source()'}, {'word': 'odbc_execute', 'menu': 'Execute a prepared statement', 'kind': '[f]', 'abbr': 'odbc_execute()'}, {'word': 'odbc_error', 'menu': 'Get the last error code', 'kind': '[f]', 'abbr': 'odbc_error()'}, {'word': 'odbc_errormsg', 'menu': 'Get the last error message', 'kind': '[f]', 'abbr': 'odbc_errormsg()'}, {'word': 'odbc_exec', 'menu': 'Prepare and execute an SQL statement', 'kind': '[f]', 'abbr': 'odbc_exec()'}, {'word': 'odbc_fetch_array', 'menu': 'Fetch a result row as an associative array', 'kind': '[f]', 'abbr': 'odbc_fetch_array()'}, {'word': 'odbc_fetch_object', 'menu': 'Fetch a result row as an object', 'kind': '[f]', 'abbr': 'odbc_fetch_object()'}, {'word': 'odbc_fetch_row', 'menu': 'Fetch a row', 'kind': '[f]', 'abbr': 'odbc_fetch_row()'}, {'word': 'odbc_fetch_into', 'menu': 'Fetch one result row into array', 'kind': '[f]', 'abbr': 'odbc_fetch_into()'}, {'word': 'odbc_field_len', 'menu': 'Get the length (precision) of a field', 'kind': '[f]', 'abbr': 'odbc_field_len()'}, {'word': 'odbc_field_scale', 'menu': 'Get the scale of a field', 'kind': '[f]', 'abbr': 'odbc_field_scale()'}, {'word': 'odbc_field_name', 'menu': 'Get the columnname', 'kind': '[f]', 'abbr': 'odbc_field_name()'}, {'word': 'odbc_field_type', 'menu': 'Datatype of a field', 'kind': '[f]', 'abbr': 'odbc_field_type()'}, {'word': 'odbc_field_num', 'menu': 'Return column number', 'kind': '[f]', 'abbr': 'odbc_field_num()'}, {'word': 'odbc_free_result', 'menu': 'Free resources associated with a result', 'kind': '[f]', 'abbr': 'odbc_free_result()'}, {'word': 'odbc_gettypeinfo', 'menu': 'Retrieves information about data types supported by the data source', 'kind': '[f]', 'abbr': 'odbc_gettypeinfo()'}, {'word': 'odbc_longreadlen', 'menu': 'Handling of LONG columns', 'kind': '[f]', 'abbr': 'odbc_longreadlen()'}, {'word': 'odbc_next_result', 'menu': 'Checks if multiple results are available', 'kind': '[f]', 'abbr': 'odbc_next_result()'}, {'word': 'odbc_num_fields', 'menu': 'Number of columns in a result', 'kind': '[f]', 'abbr': 'odbc_num_fields()'}, {'word': 'odbc_num_rows', 'menu': 'Number of rows in a result', 'kind': '[f]', 'abbr': 'odbc_num_rows()'}, {'word': 'odbc_pconnect', 'menu': 'Open a persistent database connection', 'kind': '[f]', 'abbr': 'odbc_pconnect()'}, {'word': 'odbc_prepare', 'menu': 'Prepares a statement for execution', 'kind': '[f]', 'abbr': 'odbc_prepare()'}, {'word': 'odbc_result', 'menu': 'Get result data', 'kind': '[f]', 'abbr': 'odbc_result()'}, {'word': 'odbc_result_all', 'menu': 'Print result as HTML table', 'kind': '[f]', 'abbr': 'odbc_result_all()'}, {'word': 'odbc_rollback', 'menu': 'Rollback a transaction', 'kind': '[f]', 'abbr': 'odbc_rollback()'}, {'word': 'odbc_setoption', 'menu': 'Adjust ODBC settings', 'kind': '[f]', 'abbr': 'odbc_setoption()'}, {'word': 'odbc_specialcolumns', 'menu': 'Retrieves special columns', 'kind': '[f]', 'abbr': 'odbc_specialcolumns()'}, {'word': 'odbc_statistics', 'menu': 'Retrieve statistics about a table', 'kind': '[f]', 'abbr': 'odbc_statistics()'}, {'word': 'odbc_tables', 'menu': 'Get the list of table names stored in a specific data source', 'kind': '[f]', 'abbr': 'odbc_tables()'}, {'word': 'odbc_primarykeys', 'menu': 'Gets the primary keys for a table', 'kind': '[f]', 'abbr': 'odbc_primarykeys()'}, {'word': 'odbc_columnprivileges', 'menu': 'Lists columns and associated privileges for the given table', 'kind': '[f]', 'abbr': 'odbc_columnprivileges()'}, {'word': 'odbc_tableprivileges', 'menu': 'Lists tables and the privileges associated with each table', 'kind': '[f]', 'abbr': 'odbc_tableprivileges()'}, {'word': 'odbc_foreignkeys', 'menu': 'Retrieves a list of foreign keys', 'kind': '[f]', 'abbr': 'odbc_foreignkeys()'}, {'word': 'odbc_procedures', 'menu': 'Get the list of procedures stored in a specific data source', 'kind': '[f]', 'abbr': 'odbc_procedures()'}, {'word': 'odbc_procedurecolumns', 'menu': 'Retrieve information about parameters to procedures', 'kind': '[f]', 'abbr': 'odbc_procedurecolumns()'}, {'word': 'odbc_do', 'menu': '&Alias; odbc_exec', 'kind': '[f]', 'abbr': 'odbc_do()'}, {'word': 'odbc_field_precision', 'menu': '&Alias; odbc_field_len', 'kind': '[f]', 'abbr': 'odbc_field_precision()'}, {'word': 'pcntl_fork', 'menu': 'Forks the currently running process', 'kind': '[f]', 'abbr': 'pcntl_fork()'}, {'word': 'pcntl_waitpid', 'menu': 'Waits on or returns the status of a forked child', 'kind': '[f]', 'abbr': 'pcntl_waitpid()'}, {'word': 'pcntl_wait', 'menu': 'Waits on or returns the status of a forked child', 'kind': '[f]', 'abbr': 'pcntl_wait()'}, {'word': 'pcntl_signal', 'menu': 'Installs a signal handler', 'kind': '[f]', 'abbr': 'pcntl_signal()'}, {'word': 'pcntl_signal_dispatch', 'menu': 'Calls signal handlers for pending signals', 'kind': '[f]', 'abbr': 'pcntl_signal_dispatch()'}, {'word': 'pcntl_wifexited', 'menu': 'Checks if status code represents a normal exit', 'kind': '[f]', 'abbr': 'pcntl_wifexited()'}, {'word': 'pcntl_wifstopped', 'menu': 'Checks whether the child process is currently stopped', 'kind': '[f]', 'abbr': 'pcntl_wifstopped()'}, {'word': 'pcntl_wifsignaled', 'menu': 'Checks whether the status code represents a termination due to a signal', 'kind': '[f]', 'abbr': 'pcntl_wifsignaled()'}, {'word': 'pcntl_wexitstatus', 'menu': 'Returns the return code of a terminated child', 'kind': '[f]', 'abbr': 'pcntl_wexitstatus()'}, {'word': 'pcntl_wtermsig', 'menu': 'Returns the signal which caused the child to terminate', 'kind': '[f]', 'abbr': 'pcntl_wtermsig()'}, {'word': 'pcntl_wstopsig', 'menu': 'Returns the signal which caused the child to stop', 'kind': '[f]', 'abbr': 'pcntl_wstopsig()'}, {'word': 'pcntl_exec', 'menu': 'Executes specified program in current process space', 'kind': '[f]', 'abbr': 'pcntl_exec()'}, {'word': 'pcntl_alarm', 'menu': 'Set an alarm clock for delivery of a signal', 'kind': '[f]', 'abbr': 'pcntl_alarm()'}, {'word': 'pcntl_get_last_error', 'menu': 'Retrieve the error number set by the last pcntl function which failed', 'kind': '[f]', 'abbr': 'pcntl_get_last_error()'}, {'word': 'pcntl_errno', 'menu': '&Alias; pcntl_strerror', 'kind': '[f]', 'abbr': 'pcntl_errno()'}, {'word': 'pcntl_strerror', 'menu': 'Retrieve the system error message associated with the given errno', 'kind': '[f]', 'abbr': 'pcntl_strerror()'}, {'word': 'pcntl_getpriority', 'menu': 'Get the priority of any process', 'kind': '[f]', 'abbr': 'pcntl_getpriority()'}, {'word': 'pcntl_setpriority', 'menu': 'Change the priority of any process', 'kind': '[f]', 'abbr': 'pcntl_setpriority()'}, {'word': 'pcntl_sigprocmask', 'menu': 'Sets and retrieves blocked signals', 'kind': '[f]', 'abbr': 'pcntl_sigprocmask()'}, {'word': 'spl_classes', 'menu': 'Return available SPL classes', 'kind': '[f]', 'abbr': 'spl_classes()'}, {'word': 'spl_autoload', 'menu': 'Default implementation for __autoload()', 'kind': '[f]', 'abbr': 'spl_autoload()'}, {'word': 'spl_autoload_extensions', 'menu': 'Register and return default file extensions for spl_autoload', 'kind': '[f]', 'abbr': 'spl_autoload_extensions()'}, {'word': 'spl_autoload_register', 'menu': 'Register given function as __autoload() implementation', 'kind': '[f]', 'abbr': 'spl_autoload_register()'}, {'word': 'spl_autoload_unregister', 'menu': 'Unregister given function as __autoload() implementation', 'kind': '[f]', 'abbr': 'spl_autoload_unregister()'}, {'word': 'spl_autoload_functions', 'menu': 'Return all registered __autoload() functions', 'kind': '[f]', 'abbr': 'spl_autoload_functions()'}, {'word': 'spl_autoload_call', 'menu': 'Try all registered __autoload() function to load the requested class', 'kind': '[f]', 'abbr': 'spl_autoload_call()'}, {'word': 'class_parents', 'menu': 'Return the parent classes of the given class', 'kind': '[f]', 'abbr': 'class_parents()'}, {'word': 'class_implements', 'menu': 'Return the interfaces which are implemented by the given class or interface', 'kind': '[f]', 'abbr': 'class_implements()'}, {'word': 'class_uses', 'menu': 'Return the traits used by the given class', 'kind': '[f]', 'abbr': 'class_uses()'}, {'word': 'spl_object_hash', 'menu': 'Return hash id for given object', 'kind': '[f]', 'abbr': 'spl_object_hash()'}, {'word': 'iterator_to_array', 'menu': 'Copy the iterator into an array', 'kind': '[f]', 'abbr': 'iterator_to_array()'}, {'word': 'iterator_count', 'menu': 'Count the elements in an iterator', 'kind': '[f]', 'abbr': 'iterator_count()'}, {'word': 'iterator_apply', 'menu': 'Call a function for every element in an iterator', 'kind': '[f]', 'abbr': 'iterator_apply()'}, {'word': 'posix_kill', 'menu': 'Send a signal to a process', 'kind': '[f]', 'abbr': 'posix_kill()'}, {'word': 'posix_getpid', 'menu': 'Return the current process identifier', 'kind': '[f]', 'abbr': 'posix_getpid()'}, {'word': 'posix_getppid', 'menu': 'Return the parent process identifier', 'kind': '[f]', 'abbr': 'posix_getppid()'}, {'word': 'posix_getuid', 'menu': 'Return the real user ID of the current process', 'kind': '[f]', 'abbr': 'posix_getuid()'}, {'word': 'posix_setuid', 'menu': 'Set the UID of the current process', 'kind': '[f]', 'abbr': 'posix_setuid()'}, {'word': 'posix_geteuid', 'menu': 'Return the effective user ID of the current process', 'kind': '[f]', 'abbr': 'posix_geteuid()'}, {'word': 'posix_seteuid', 'menu': 'Set the effective UID of the current process', 'kind': '[f]', 'abbr': 'posix_seteuid()'}, {'word': 'posix_getgid', 'menu': 'Return the real group ID of the current process', 'kind': '[f]', 'abbr': 'posix_getgid()'}, {'word': 'posix_setgid', 'menu': 'Set the GID of the current process', 'kind': '[f]', 'abbr': 'posix_setgid()'}, {'word': 'posix_getegid', 'menu': 'Return the effective group ID of the current process', 'kind': '[f]', 'abbr': 'posix_getegid()'}, {'word': 'posix_setegid', 'menu': 'Set the effective GID of the current process', 'kind': '[f]', 'abbr': 'posix_setegid()'}, {'word': 'posix_getgroups', 'menu': 'Return the group set of the current process', 'kind': '[f]', 'abbr': 'posix_getgroups()'}, {'word': 'posix_getlogin', 'menu': 'Return login name', 'kind': '[f]', 'abbr': 'posix_getlogin()'}, {'word': 'posix_getpgrp', 'menu': 'Return the current process group identifier', 'kind': '[f]', 'abbr': 'posix_getpgrp()'}, {'word': 'posix_setsid', 'menu': 'Make the current process a session leader', 'kind': '[f]', 'abbr': 'posix_setsid()'}, {'word': 'posix_setpgid', 'menu': 'Set process group id for job control', 'kind': '[f]', 'abbr': 'posix_setpgid()'}, {'word': 'posix_getpgid', 'menu': 'Get process group id for job control', 'kind': '[f]', 'abbr': 'posix_getpgid()'}, {'word': 'posix_getsid', 'menu': 'Get the current sid of the process', 'kind': '[f]', 'abbr': 'posix_getsid()'}, {'word': 'posix_uname', 'menu': 'Get system name', 'kind': '[f]', 'abbr': 'posix_uname()'}, {'word': 'posix_times', 'menu': 'Get process times', 'kind': '[f]', 'abbr': 'posix_times()'}, {'word': 'posix_ctermid', 'menu': 'Get path name of controlling terminal', 'kind': '[f]', 'abbr': 'posix_ctermid()'}, {'word': 'posix_ttyname', 'menu': 'Determine terminal device name', 'kind': '[f]', 'abbr': 'posix_ttyname()'}, {'word': 'posix_isatty', 'menu': 'Determine if a file descriptor is an interactive terminal', 'kind': '[f]', 'abbr': 'posix_isatty()'}, {'word': 'posix_getcwd', 'menu': 'Pathname of current directory', 'kind': '[f]', 'abbr': 'posix_getcwd()'}, {'word': 'posix_mkfifo', 'menu': 'Create a fifo special file (a named pipe)', 'kind': '[f]', 'abbr': 'posix_mkfifo()'}, {'word': 'posix_mknod', 'menu': 'Create a special or ordinary file (POSIX.1)', 'kind': '[f]', 'abbr': 'posix_mknod()'}, {'word': 'posix_access', 'menu': 'Determine accessibility of a file', 'kind': '[f]', 'abbr': 'posix_access()'}, {'word': 'posix_getgrnam', 'menu': 'Return info about a group by name', 'kind': '[f]', 'abbr': 'posix_getgrnam()'}, {'word': 'posix_getgrgid', 'menu': 'Return info about a group by group id', 'kind': '[f]', 'abbr': 'posix_getgrgid()'}, {'word': 'posix_getpwnam', 'menu': 'Return info about a user by username', 'kind': '[f]', 'abbr': 'posix_getpwnam()'}, {'word': 'posix_getpwuid', 'menu': 'Return info about a user by user id', 'kind': '[f]', 'abbr': 'posix_getpwuid()'}, {'word': 'posix_getrlimit', 'menu': 'Return info about system resource limits', 'kind': '[f]', 'abbr': 'posix_getrlimit()'}, {'word': 'posix_get_last_error', 'menu': 'Retrieve the error number set by the last posix function that failed', 'kind': '[f]', 'abbr': 'posix_get_last_error()'}, {'word': 'posix_errno', 'menu': '&Alias; posix_get_last_error', 'kind': '[f]', 'abbr': 'posix_errno()'}, {'word': 'posix_strerror', 'menu': 'Retrieve the system error message associated with the given errno', 'kind': '[f]', 'abbr': 'posix_strerror()'}, {'word': 'posix_initgroups', 'menu': 'Calculate the group access list', 'kind': '[f]', 'abbr': 'posix_initgroups()'}, {'word': 'readline', 'menu': 'Reads a line', 'kind': '[f]', 'abbr': 'readline()'}, {'word': 'readline_info', 'menu': 'Gets/sets various internal readline variables', 'kind': '[f]', 'abbr': 'readline_info()'}, {'word': 'readline_add_history', 'menu': 'Adds a line to the history', 'kind': '[f]', 'abbr': 'readline_add_history()'}, {'word': 'readline_clear_history', 'menu': 'Clears the history', 'kind': '[f]', 'abbr': 'readline_clear_history()'}, {'word': 'readline_read_history', 'menu': 'Reads the history', 'kind': '[f]', 'abbr': 'readline_read_history()'}, {'word': 'readline_write_history', 'menu': 'Writes the history', 'kind': '[f]', 'abbr': 'readline_write_history()'}, {'word': 'readline_completion_function', 'menu': 'Registers a completion function', 'kind': '[f]', 'abbr': 'readline_completion_function()'}, {'word': 'readline_callback_handler_install', 'menu': 'Initializes the readline callback interface and terminal, prints the prompt and returns immediately', 'kind': '[f]', 'abbr': 'readline_callback_handler_install()'}, {'word': 'readline_callback_read_char', 'menu': 'Reads a character and informs the readline callback interface when a line is received', 'kind': '[f]', 'abbr': 'readline_callback_read_char()'}, {'word': 'readline_callback_handler_remove', 'menu': 'Removes a previously installed callback handler and restores terminal settings', 'kind': '[f]', 'abbr': 'readline_callback_handler_remove()'}, {'word': 'readline_redisplay', 'menu': 'Redraws the display', 'kind': '[f]', 'abbr': 'readline_redisplay()'}, {'word': 'readline_on_new_line', 'menu': 'Inform readline that the cursor has moved to a new line', 'kind': '[f]', 'abbr': 'readline_on_new_line()'}, {'word': 'session_name', 'menu': 'Get and/or set the current session name', 'kind': '[f]', 'abbr': 'session_name()'}, {'word': 'session_module_name', 'menu': 'Get and/or set the current session module', 'kind': '[f]', 'abbr': 'session_module_name()'}, {'word': 'session_save_path', 'menu': 'Get and/or set the current session save path', 'kind': '[f]', 'abbr': 'session_save_path()'}, {'word': 'session_id', 'menu': 'Get and/or set the current session id', 'kind': '[f]', 'abbr': 'session_id()'}, {'word': 'session_regenerate_id', 'menu': 'Update the current session id with a newly generated one', 'kind': '[f]', 'abbr': 'session_regenerate_id()'}, {'word': 'session_decode', 'menu': 'Decodes session data from a session encoded string', 'kind': '[f]', 'abbr': 'session_decode()'}, {'word': 'session_encode', 'menu': 'Encodes the current session data as a session encoded string', 'kind': '[f]', 'abbr': 'session_encode()'}, {'word': 'session_start', 'menu': 'Start new or resume existing session', 'kind': '[f]', 'abbr': 'session_start()'}, {'word': 'session_destroy', 'menu': 'Destroys all data registered to a session', 'kind': '[f]', 'abbr': 'session_destroy()'}, {'word': 'session_unset', 'menu': 'Free all session variables', 'kind': '[f]', 'abbr': 'session_unset()'}, {'word': 'session_set_save_handler', 'menu': 'Sets user-level session storage functions', 'kind': '[f]', 'abbr': 'session_set_save_handler()'}, {'word': 'session_cache_limiter', 'menu': 'Get and/or set the current cache limiter', 'kind': '[f]', 'abbr': 'session_cache_limiter()'}, {'word': 'session_cache_expire', 'menu': 'Return current cache expire', 'kind': '[f]', 'abbr': 'session_cache_expire()'}, {'word': 'session_set_cookie_params', 'menu': 'Set the session cookie parameters', 'kind': '[f]', 'abbr': 'session_set_cookie_params()'}, {'word': 'session_get_cookie_params', 'menu': 'Get the session cookie parameters', 'kind': '[f]', 'abbr': 'session_get_cookie_params()'}, {'word': 'session_write_close', 'menu': 'Write session data and end session', 'kind': '[f]', 'abbr': 'session_write_close()'}, {'word': 'session_abort', 'menu': 'Discard session array changes and finish session', 'kind': '[f]', 'abbr': 'session_abort()'}, {'word': 'session_reset', 'menu': 'Re-initialize session array with original values', 'kind': '[f]', 'abbr': 'session_reset()'}, {'word': 'session_status', 'menu': 'Returns the current session status', 'kind': '[f]', 'abbr': 'session_status()'}, {'word': 'session_register_shutdown', 'menu': 'Session shutdown function', 'kind': '[f]', 'abbr': 'session_register_shutdown()'}, {'word': 'session_commit', 'menu': '&Alias; session_write_close', 'kind': '[f]', 'abbr': 'session_commit()'}, {'word': 'shmop_open', 'menu': 'Create or open shared memory block', 'kind': '[f]', 'abbr': 'shmop_open()'}, {'word': 'shmop_read', 'menu': 'Read data from shared memory block', 'kind': '[f]', 'abbr': 'shmop_read()'}, {'word': 'shmop_close', 'menu': 'Close shared memory block', 'kind': '[f]', 'abbr': 'shmop_close()'}, {'word': 'shmop_size', 'menu': 'Get size of shared memory block', 'kind': '[f]', 'abbr': 'shmop_size()'}, {'word': 'shmop_write', 'menu': 'Write data into shared memory block', 'kind': '[f]', 'abbr': 'shmop_write()'}, {'word': 'shmop_delete', 'menu': 'Delete shared memory block', 'kind': '[f]', 'abbr': 'shmop_delete()'}, {'word': 'simplexml_load_file', 'menu': 'Interprets an XML file into an object', 'kind': '[f]', 'abbr': 'simplexml_load_file()'}, {'word': 'simplexml_load_string', 'menu': 'Interprets a string of XML into an object', 'kind': '[f]', 'abbr': 'simplexml_load_string()'}, {'word': 'simplexml_import_dom', 'menu': 'Get a SimpleXMLElement object from a DOM node.', 'kind': '[f]', 'abbr': 'simplexml_import_dom()'}, {'word': 'use_soap_error_handler', 'menu': 'Set whether to use the SOAP error handler', 'kind': '[f]', 'abbr': 'use_soap_error_handler()'}, {'word': 'is_soap_fault', 'menu': 'Checks if a SOAP call has failed', 'kind': '[f]', 'abbr': 'is_soap_fault()'}, {'word': 'socket_select', 'menu': 'Runs the select() system call on the given arrays of sockets with a specified timeout', 'kind': '[f]', 'abbr': 'socket_select()'}, {'word': 'socket_create', 'menu': 'Create a socket (endpoint for communication)', 'kind': '[f]', 'abbr': 'socket_create()'}, {'word': 'socket_create_listen', 'menu': 'Opens a socket on port to accept connections', 'kind': '[f]', 'abbr': 'socket_create_listen()'}, {'word': 'socket_create_pair', 'menu': 'Creates a pair of indistinguishable sockets and stores them in an array', 'kind': '[f]', 'abbr': 'socket_create_pair()'}, {'word': 'socket_accept', 'menu': 'Accepts a connection on a socket', 'kind': '[f]', 'abbr': 'socket_accept()'}, {'word': 'socket_set_nonblock', 'menu': 'Sets nonblocking mode for file descriptor fd', 'kind': '[f]', 'abbr': 'socket_set_nonblock()'}, {'word': 'socket_set_block', 'menu': 'Sets blocking mode on a socket resource', 'kind': '[f]', 'abbr': 'socket_set_block()'}, {'word': 'socket_listen', 'menu': 'Listens for a connection on a socket', 'kind': '[f]', 'abbr': 'socket_listen()'}, {'word': 'socket_close', 'menu': 'Closes a socket resource', 'kind': '[f]', 'abbr': 'socket_close()'}, {'word': 'socket_write', 'menu': 'Write to a socket', 'kind': '[f]', 'abbr': 'socket_write()'}, {'word': 'socket_read', 'menu': 'Reads a maximum of length bytes from a socket', 'kind': '[f]', 'abbr': 'socket_read()'}, {'word': 'socket_getsockname', 'menu': 'Queries the local side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type', 'kind': '[f]', 'abbr': 'socket_getsockname()'}, {'word': 'socket_getpeername', 'menu': 'Queries the remote side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type', 'kind': '[f]', 'abbr': 'socket_getpeername()'}, {'word': 'socket_connect', 'menu': 'Initiates a connection on a socket', 'kind': '[f]', 'abbr': 'socket_connect()'}, {'word': 'socket_strerror', 'menu': 'Return a string describing a socket error', 'kind': '[f]', 'abbr': 'socket_strerror()'}, {'word': 'socket_bind', 'menu': 'Binds a name to a socket', 'kind': '[f]', 'abbr': 'socket_bind()'}, {'word': 'socket_recv', 'menu': 'Receives data from a connected socket', 'kind': '[f]', 'abbr': 'socket_recv()'}, {'word': 'socket_send', 'menu': 'Sends data to a connected socket', 'kind': '[f]', 'abbr': 'socket_send()'}, {'word': 'socket_recvfrom', 'menu': 'Receives data from a socket whether or not it is connection-oriented', 'kind': '[f]', 'abbr': 'socket_recvfrom()'}, {'word': 'socket_sendto', 'menu': 'Sends a message to a socket, whether it is connected or not', 'kind': '[f]', 'abbr': 'socket_sendto()'}, {'word': 'socket_get_option', 'menu': 'Gets socket options for the socket', 'kind': '[f]', 'abbr': 'socket_get_option()'}, {'word': 'socket_set_option', 'menu': 'Sets socket options for the socket', 'kind': '[f]', 'abbr': 'socket_set_option()'}, {'word': 'socket_shutdown', 'menu': 'Shuts down a socket for receiving, sending, or both', 'kind': '[f]', 'abbr': 'socket_shutdown()'}, {'word': 'socket_last_error', 'menu': 'Returns the last error on the socket', 'kind': '[f]', 'abbr': 'socket_last_error()'}, {'word': 'socket_clear_error', 'menu': 'Clears the error on the socket or the last error code', 'kind': '[f]', 'abbr': 'socket_clear_error()'}, {'word': 'socket_import_stream', 'menu': 'Import a stream', 'kind': '[f]', 'abbr': 'socket_import_stream()'}, {'word': 'socket_sendmsg', 'menu': 'Send a message', 'kind': '[f]', 'abbr': 'socket_sendmsg()'}, {'word': 'socket_recvmsg', 'menu': 'Read a message', 'kind': '[f]', 'abbr': 'socket_recvmsg()'}, {'word': 'socket_cmsg_space', 'menu': 'Calculate message buffer size', 'kind': '[f]', 'abbr': 'socket_cmsg_space()'}, {'word': 'socket_getopt', 'menu': '&Alias; socket_get_option', 'kind': '[f]', 'abbr': 'socket_getopt()'}, {'word': 'socket_setopt', 'menu': '&Alias; socket_set_option', 'kind': '[f]', 'abbr': 'socket_setopt()'}, {'word': 'constant', 'menu': 'Returns the value of a constant', 'kind': '[f]', 'abbr': 'constant()'}, {'word': 'bin2hex', 'menu': 'Convert binary data into hexadecimal representation', 'kind': '[f]', 'abbr': 'bin2hex()'}, {'word': 'hex2bin', 'menu': 'Decodes a hexadecimally encoded binary string', 'kind': '[f]', 'abbr': 'hex2bin()'}, {'word': 'sleep', 'menu': 'Yaf_Application can not be serialized', 'kind': '[f]', 'abbr': 'sleep()'}, {'word': 'usleep', 'menu': 'Delay execution in microseconds', 'kind': '[f]', 'abbr': 'usleep()'}, {'word': 'time_nanosleep', 'menu': 'Delay for a number of seconds and nanoseconds', 'kind': '[f]', 'abbr': 'time_nanosleep()'}, {'word': 'time_sleep_until', 'menu': 'Make the script sleep until the specified time', 'kind': '[f]', 'abbr': 'time_sleep_until()'}, {'word': 'strptime', 'menu': 'Parse a time/date generated with strftime', 'kind': '[f]', 'abbr': 'strptime()'}, {'word': 'flush', 'menu': 'Flush system output buffer', 'kind': '[f]', 'abbr': 'flush()'}, {'word': 'wordwrap', 'menu': 'Wraps a string to a given number of characters', 'kind': '[f]', 'abbr': 'wordwrap()'}, {'word': 'htmlspecialchars', 'menu': 'Convert special characters to HTML entities', 'kind': '[f]', 'abbr': 'htmlspecialchars()'}, {'word': 'htmlentities', 'menu': 'Convert all applicable characters to HTML entities', 'kind': '[f]', 'abbr': 'htmlentities()'}, {'word': 'html_entity_decode', 'menu': 'Convert all HTML entities to their applicable characters', 'kind': '[f]', 'abbr': 'html_entity_decode()'}, {'word': 'htmlspecialchars_decode', 'menu': 'Convert special HTML entities back to characters', 'kind': '[f]', 'abbr': 'htmlspecialchars_decode()'}, {'word': 'get_html_translation_table', 'menu': 'Returns the translation table used by htmlspecialchars and htmlentities', 'kind': '[f]', 'abbr': 'get_html_translation_table()'}, {'word': 'sha1', 'menu': 'Calculate the sha1 hash of a string', 'kind': '[f]', 'abbr': 'sha1()'}, {'word': 'sha1_file', 'menu': 'Calculate the sha1 hash of a file', 'kind': '[f]', 'abbr': 'sha1_file()'}, {'word': 'md5', 'menu': 'Calculate the md5 hash of a string', 'kind': '[f]', 'abbr': 'md5()'}, {'word': 'md5_file', 'menu': 'Calculates the md5 hash of a given file', 'kind': '[f]', 'abbr': 'md5_file()'}, {'word': 'crc32', 'menu': 'Calculates the crc32 polynomial of a string', 'kind': '[f]', 'abbr': 'crc32()'}, {'word': 'iptcparse', 'menu': 'Parse a binary IPTC block into single tags.', 'kind': '[f]', 'abbr': 'iptcparse()'}, {'word': 'iptcembed', 'menu': 'Embeds binary IPTC data into a JPEG image', 'kind': '[f]', 'abbr': 'iptcembed()'}, {'word': 'getimagesize', 'menu': 'Returns the image length in bytes', 'kind': '[f]', 'abbr': 'getimagesize()'}, {'word': 'getimagesizefromstring', 'menu': 'Get the size of an image from a string', 'kind': '[f]', 'abbr': 'getimagesizefromstring()'}, {'word': 'image_type_to_mime_type', 'menu': 'Get Mime-Type for image-type returned by getimagesize,   exif_read_data, exif_thumbnail, exif_imagetype', 'kind': '[f]', 'abbr': 'image_type_to_mime_type()'}, {'word': 'image_type_to_extension', 'menu': 'Get file extension for image type', 'kind': '[f]', 'abbr': 'image_type_to_extension()'}, {'word': 'phpinfo', 'menu': 'Outputs information about PHP''s configuration', 'kind': '[f]', 'abbr': 'phpinfo()'}, {'word': 'phpversion', 'menu': 'Gets the current PHP version', 'kind': '[f]', 'abbr': 'phpversion()'}, {'word': 'phpcredits', 'menu': 'Prints out the credits for PHP', 'kind': '[f]', 'abbr': 'phpcredits()'}, {'word': 'php_sapi_name', 'menu': 'Returns the type of interface between web server and PHP', 'kind': '[f]', 'abbr': 'php_sapi_name()'}, {'word': 'php_uname', 'menu': 'Returns information about the operating system PHP is running on', 'kind': '[f]', 'abbr': 'php_uname()'}, {'word': 'php_ini_scanned_files', 'menu': 'Return a list of .ini files parsed from the additional ini dir', 'kind': '[f]', 'abbr': 'php_ini_scanned_files()'}, {'word': 'php_ini_loaded_file', 'menu': 'Retrieve a path to the loaded php.ini file', 'kind': '[f]', 'abbr': 'php_ini_loaded_file()'}, {'word': 'strnatcmp', 'menu': 'String comparisons using a "natural order" algorithm', 'kind': '[f]', 'abbr': 'strnatcmp()'}, {'word': 'strnatcasecmp', 'menu': 'Case insensitive string comparisons using a "natural order" algorithm', 'kind': '[f]', 'abbr': 'strnatcasecmp()'}, {'word': 'substr_count', 'menu': 'Count the number of substring occurrences', 'kind': '[f]', 'abbr': 'substr_count()'}, {'word': 'strspn', 'menu': 'Finds the length of the initial segment of a string consisting   entirely of characters contained within a given mask.', 'kind': '[f]', 'abbr': 'strspn()'}, {'word': 'strcspn', 'menu': 'Find length of initial segment not matching mask', 'kind': '[f]', 'abbr': 'strcspn()'}, {'word': 'strtok', 'menu': 'Tokenize string', 'kind': '[f]', 'abbr': 'strtok()'}, {'word': 'strtoupper', 'menu': 'Make a string uppercase', 'kind': '[f]', 'abbr': 'strtoupper()'}, {'word': 'strtolower', 'menu': 'Make a string lowercase', 'kind': '[f]', 'abbr': 'strtolower()'}, {'word': 'strpos', 'menu': 'Find the position of the first occurrence of a substring in a string', 'kind': '[f]', 'abbr': 'strpos()'}, {'word': 'stripos', 'menu': 'Find the position of the first occurrence of a case-insensitive substring in a string', 'kind': '[f]', 'abbr': 'stripos()'}, {'word': 'strrpos', 'menu': 'Find the position of the last occurrence of a substring in a string', 'kind': '[f]', 'abbr': 'strrpos()'}, {'word': 'strripos', 'menu': 'Find the position of the last occurrence of a case-insensitive substring in a string', 'kind': '[f]', 'abbr': 'strripos()'}, {'word': 'strrev', 'menu': 'Reverse a string', 'kind': '[f]', 'abbr': 'strrev()'}, {'word': 'hebrev', 'menu': 'Convert logical Hebrew text to visual text', 'kind': '[f]', 'abbr': 'hebrev()'}, {'word': 'hebrevc', 'menu': 'Convert logical Hebrew text to visual text with newline conversion', 'kind': '[f]', 'abbr': 'hebrevc()'}, {'word': 'nl2br', 'menu': 'Inserts HTML line breaks before all newlines in a string', 'kind': '[f]', 'abbr': 'nl2br()'}, {'word': 'basename', 'menu': 'Returns trailing name component of path', 'kind': '[f]', 'abbr': 'basename()'}, {'word': 'dirname', 'menu': 'Returns a parent directory''s path', 'kind': '[f]', 'abbr': 'dirname()'}, {'word': 'pathinfo', 'menu': 'Returns information about a file path', 'kind': '[f]', 'abbr': 'pathinfo()'}, {'word': 'stripslashes', 'menu': 'Un-quotes a quoted string', 'kind': '[f]', 'abbr': 'stripslashes()'}, {'word': 'stripcslashes', 'menu': 'Un-quote string quoted with addcslashes', 'kind': '[f]', 'abbr': 'stripcslashes()'}, {'word': 'strstr', 'menu': 'Find the first occurrence of a string', 'kind': '[f]', 'abbr': 'strstr()'}, {'word': 'stristr', 'menu': 'Case-insensitive strstr', 'kind': '[f]', 'abbr': 'stristr()'}, {'word': 'strrchr', 'menu': 'Find the last occurrence of a character in a string', 'kind': '[f]', 'abbr': 'strrchr()'}, {'word': 'str_shuffle', 'menu': 'Randomly shuffles a string', 'kind': '[f]', 'abbr': 'str_shuffle()'}, {'word': 'str_word_count', 'menu': 'Return information about words used in a string', 'kind': '[f]', 'abbr': 'str_word_count()'}, {'word': 'str_split', 'menu': 'Convert a string to an array', 'kind': '[f]', 'abbr': 'str_split()'}, {'word': 'strpbrk', 'menu': 'Search a string for any of a set of characters', 'kind': '[f]', 'abbr': 'strpbrk()'}, {'word': 'substr_compare', 'menu': 'Binary safe comparison of two strings from an offset, up to length characters', 'kind': '[f]', 'abbr': 'substr_compare()'}, {'word': 'strcoll', 'menu': 'Locale based string comparison', 'kind': '[f]', 'abbr': 'strcoll()'}, {'word': 'money_format', 'menu': 'Formats a number as a currency string', 'kind': '[f]', 'abbr': 'money_format()'}, {'word': 'substr', 'menu': 'Return part of a string', 'kind': '[f]', 'abbr': 'substr()'}, {'word': 'substr_replace', 'menu': 'Replace text within a portion of a string', 'kind': '[f]', 'abbr': 'substr_replace()'}, {'word': 'quotemeta', 'menu': 'Quote meta characters', 'kind': '[f]', 'abbr': 'quotemeta()'}, {'word': 'ucfirst', 'menu': 'Make a string''s first character uppercase', 'kind': '[f]', 'abbr': 'ucfirst()'}, {'word': 'lcfirst', 'menu': 'Make a string''s first character lowercase', 'kind': '[f]', 'abbr': 'lcfirst()'}, {'word': 'ucwords', 'menu': 'Uppercase the first character of each word in a string', 'kind': '[f]', 'abbr': 'ucwords()'}, {'word': 'strtr', 'menu': 'Translate characters or replace substrings', 'kind': '[f]', 'abbr': 'strtr()'}, {'word': 'addslashes', 'menu': 'Quote string with slashes', 'kind': '[f]', 'abbr': 'addslashes()'}, {'word': 'addcslashes', 'menu': 'Quote string with slashes in a C style', 'kind': '[f]', 'abbr': 'addcslashes()'}, {'word': 'rtrim', 'menu': 'Strip whitespace (or other characters) from the end of a string', 'kind': '[f]', 'abbr': 'rtrim()'}, {'word': 'str_replace', 'menu': 'Replace all occurrences of the search string with the replacement string', 'kind': '[f]', 'abbr': 'str_replace()'}, {'word': 'str_ireplace', 'menu': 'Case-insensitive version of str_replace.', 'kind': '[f]', 'abbr': 'str_ireplace()'}, {'word': 'str_repeat', 'menu': 'Repeat a string', 'kind': '[f]', 'abbr': 'str_repeat()'}, {'word': 'count_chars', 'menu': 'Return information about characters used in a string', 'kind': '[f]', 'abbr': 'count_chars()'}, {'word': 'chunk_split', 'menu': 'Split a string into smaller chunks', 'kind': '[f]', 'abbr': 'chunk_split()'}, {'word': 'trim', 'menu': 'Strip whitespace (or other characters) from the beginning and end of a string', 'kind': '[f]', 'abbr': 'trim()'}, {'word': 'ltrim', 'menu': 'Strip whitespace (or other characters) from the beginning of a string', 'kind': '[f]', 'abbr': 'ltrim()'}, {'word': 'strip_tags', 'menu': 'Strip HTML and PHP tags from a string', 'kind': '[f]', 'abbr': 'strip_tags()'}, {'word': 'similar_text', 'menu': 'Calculate the similarity between two strings', 'kind': '[f]', 'abbr': 'similar_text()'}, {'word': 'explode', 'menu': 'Split a string by string', 'kind': '[f]', 'abbr': 'explode()'}, {'word': 'implode', 'menu': 'Join array elements with a string', 'kind': '[f]', 'abbr': 'implode()'}, {'word': 'join', 'menu': '&Alias; implode', 'kind': '[f]', 'abbr': 'join()'}, {'word': 'setlocale', 'menu': 'Set locale information', 'kind': '[f]', 'abbr': 'setlocale()'}, {'word': 'localeconv', 'menu': 'Get numeric formatting information', 'kind': '[f]', 'abbr': 'localeconv()'}, {'word': 'nl_langinfo', 'menu': 'Query language and locale information', 'kind': '[f]', 'abbr': 'nl_langinfo()'}, {'word': 'soundex', 'menu': 'Calculate the soundex key of a string', 'kind': '[f]', 'abbr': 'soundex()'}, {'word': 'levenshtein', 'menu': 'Calculate Levenshtein distance between two strings', 'kind': '[f]', 'abbr': 'levenshtein()'}, {'word': 'chr', 'menu': 'Return a specific character', 'kind': '[f]', 'abbr': 'chr()'}, {'word': 'ord', 'menu': 'Return ASCII value of character', 'kind': '[f]', 'abbr': 'ord()'}, {'word': 'parse_str', 'menu': 'Parses the string into variables', 'kind': '[f]', 'abbr': 'parse_str()'}, {'word': 'str_getcsv', 'menu': 'Parse a CSV string into an array', 'kind': '[f]', 'abbr': 'str_getcsv()'}, {'word': 'str_pad', 'menu': 'Pad a string to a certain length with another string', 'kind': '[f]', 'abbr': 'str_pad()'}, {'word': 'chop', 'menu': '&Alias; rtrim', 'kind': '[f]', 'abbr': 'chop()'}, {'word': 'strchr', 'menu': '&Alias; strstr', 'kind': '[f]', 'abbr': 'strchr()'}, {'word': 'sprintf', 'menu': 'Return a formatted string', 'kind': '[f]', 'abbr': 'sprintf()'}, {'word': 'printf', 'menu': 'Output a formatted string', 'kind': '[f]', 'abbr': 'printf()'}, {'word': 'vprintf', 'menu': 'Output a formatted string', 'kind': '[f]', 'abbr': 'vprintf()'}, {'word': 'vsprintf', 'menu': 'Return a formatted string', 'kind': '[f]', 'abbr': 'vsprintf()'}, {'word': 'fprintf', 'menu': 'Write a formatted string to a stream', 'kind': '[f]', 'abbr': 'fprintf()'}, {'word': 'vfprintf', 'menu': 'Write a formatted string to a stream', 'kind': '[f]', 'abbr': 'vfprintf()'}, {'word': 'sscanf', 'menu': 'Parses input from a string according to a format', 'kind': '[f]', 'abbr': 'sscanf()'}, {'word': 'fscanf', 'menu': 'Parses input from file according to a format', 'kind': '[f]', 'abbr': 'fscanf()'}, {'word': 'parse_url', 'menu': 'Parse a URL and return its components', 'kind': '[f]', 'abbr': 'parse_url()'}, {'word': 'urlencode', 'menu': 'URL-encodes string', 'kind': '[f]', 'abbr': 'urlencode()'}, {'word': 'urldecode', 'menu': 'Decodes URL-encoded string', 'kind': '[f]', 'abbr': 'urldecode()'}, {'word': 'rawurlencode', 'menu': 'URL-encode according to RFC 3986', 'kind': '[f]', 'abbr': 'rawurlencode()'}, {'word': 'rawurldecode', 'menu': 'Decode URL-encoded strings', 'kind': '[f]', 'abbr': 'rawurldecode()'}, {'word': 'http_build_query', 'menu': 'Generate URL-encoded query string', 'kind': '[f]', 'abbr': 'http_build_query()'}, {'word': 'readlink', 'menu': 'Returns the target of a symbolic link', 'kind': '[f]', 'abbr': 'readlink()'}, {'word': 'linkinfo', 'menu': 'Gets information about a link', 'kind': '[f]', 'abbr': 'linkinfo()'}, {'word': 'symlink', 'menu': 'Creates a symbolic link', 'kind': '[f]', 'abbr': 'symlink()'}, {'word': 'link', 'menu': 'Creates a link to an object', 'kind': '[f]', 'abbr': 'link()'}, {'word': 'unlink', 'menu': 'Delete a file', 'kind': '[f]', 'abbr': 'unlink()'}, {'word': 'exec', 'menu': 'Executes a result-less query against a given database', 'kind': '[f]', 'abbr': 'exec()'}, {'word': 'system', 'menu': 'Retrieve Solr Server information', 'kind': '[f]', 'abbr': 'system()'}, {'word': 'escapeshellcmd', 'menu': 'Escape shell metacharacters', 'kind': '[f]', 'abbr': 'escapeshellcmd()'}, {'word': 'escapeshellarg', 'menu': 'Escape a string to be used as a shell argument', 'kind': '[f]', 'abbr': 'escapeshellarg()'}, {'word': 'passthru', 'menu': 'Execute an external program and display raw output', 'kind': '[f]', 'abbr': 'passthru()'}, {'word': 'shell_exec', 'menu': 'Execute command via shell and return the complete output as a string', 'kind': '[f]', 'abbr': 'shell_exec()'}, {'word': 'proc_open', 'menu': 'Execute a command and open file pointers for input/output', 'kind': '[f]', 'abbr': 'proc_open()'}, {'word': 'proc_close', 'menu': 'Close a process opened by proc_open and return the exit code of that process', 'kind': '[f]', 'abbr': 'proc_close()'}, {'word': 'proc_terminate', 'menu': 'Kills a process opened by proc_open', 'kind': '[f]', 'abbr': 'proc_terminate()'}, {'word': 'proc_get_status', 'menu': 'Get information about a process opened by proc_open', 'kind': '[f]', 'abbr': 'proc_get_status()'}, {'word': 'proc_nice', 'menu': 'Change the priority of the current process', 'kind': '[f]', 'abbr': 'proc_nice()'}, {'word': 'rand', 'menu': 'Generate a random integer', 'kind': '[f]', 'abbr': 'rand()'}, {'word': 'srand', 'menu': 'Seed the random number generator', 'kind': '[f]', 'abbr': 'srand()'}, {'word': 'getrandmax', 'menu': 'Show largest possible random value', 'kind': '[f]', 'abbr': 'getrandmax()'}, {'word': 'mt_rand', 'menu': 'Generate a better random value', 'kind': '[f]', 'abbr': 'mt_rand()'}, {'word': 'mt_srand', 'menu': 'Seed the better random number generator', 'kind': '[f]', 'abbr': 'mt_srand()'}, {'word': 'mt_getrandmax', 'menu': 'Show largest possible random value', 'kind': '[f]', 'abbr': 'mt_getrandmax()'}, {'word': 'getservbyname', 'menu': 'Get port number associated with an Internet service and protocol', 'kind': '[f]', 'abbr': 'getservbyname()'}, {'word': 'getservbyport', 'menu': 'Get Internet service which corresponds to port and protocol', 'kind': '[f]', 'abbr': 'getservbyport()'}, {'word': 'getprotobyname', 'menu': 'Get protocol number associated with protocol name', 'kind': '[f]', 'abbr': 'getprotobyname()'}, {'word': 'getprotobynumber', 'menu': 'Get protocol name associated with protocol number', 'kind': '[f]', 'abbr': 'getprotobynumber()'}, {'word': 'getmyuid', 'menu': 'Gets PHP script owner''s UID', 'kind': '[f]', 'abbr': 'getmyuid()'}, {'word': 'getmygid', 'menu': 'Get PHP script owner''s GID', 'kind': '[f]', 'abbr': 'getmygid()'}, {'word': 'getmypid', 'menu': 'Gets PHP''s process ID', 'kind': '[f]', 'abbr': 'getmypid()'}, {'word': 'getmyinode', 'menu': 'Gets the inode of the current script', 'kind': '[f]', 'abbr': 'getmyinode()'}, {'word': 'getlastmod', 'menu': 'Gets time of last page modification', 'kind': '[f]', 'abbr': 'getlastmod()'}, {'word': 'base64_decode', 'menu': 'Decodes data encoded with MIME base64', 'kind': '[f]', 'abbr': 'base64_decode()'}, {'word': 'base64_encode', 'menu': 'Encodes data with MIME base64', 'kind': '[f]', 'abbr': 'base64_encode()'}, {'word': 'password_hash', 'menu': 'Creates a password hash', 'kind': '[f]', 'abbr': 'password_hash()'}, {'word': 'password_get_info', 'menu': 'Returns information about the given hash', 'kind': '[f]', 'abbr': 'password_get_info()'}, {'word': 'password_needs_rehash', 'menu': 'Checks if the given hash matches the given options', 'kind': '[f]', 'abbr': 'password_needs_rehash()'}, {'word': 'password_verify', 'menu': 'Verifies that a password matches a hash', 'kind': '[f]', 'abbr': 'password_verify()'}, {'word': 'convert_uuencode', 'menu': 'Uuencode a string', 'kind': '[f]', 'abbr': 'convert_uuencode()'}, {'word': 'convert_uudecode', 'menu': 'Decode a uuencoded string', 'kind': '[f]', 'abbr': 'convert_uudecode()'}, {'word': 'abs', 'menu': 'Absolute value', 'kind': '[f]', 'abbr': 'abs()'}, {'word': 'ceil', 'menu': 'Round fractions up', 'kind': '[f]', 'abbr': 'ceil()'}, {'word': 'floor', 'menu': 'Round fractions down', 'kind': '[f]', 'abbr': 'floor()'}, {'word': 'round', 'menu': 'Rounds a float', 'kind': '[f]', 'abbr': 'round()'}, {'word': 'sin', 'menu': 'Sine', 'kind': '[f]', 'abbr': 'sin()'}, {'word': 'cos', 'menu': 'Cosine', 'kind': '[f]', 'abbr': 'cos()'}, {'word': 'tan', 'menu': 'Tangent', 'kind': '[f]', 'abbr': 'tan()'}, {'word': 'asin', 'menu': 'Arc sine', 'kind': '[f]', 'abbr': 'asin()'}, {'word': 'acos', 'menu': 'Arc cosine', 'kind': '[f]', 'abbr': 'acos()'}, {'word': 'atan', 'menu': 'Arc tangent', 'kind': '[f]', 'abbr': 'atan()'}, {'word': 'atanh', 'menu': 'Inverse hyperbolic tangent', 'kind': '[f]', 'abbr': 'atanh()'}, {'word': 'atan2', 'menu': 'Arc tangent of two variables', 'kind': '[f]', 'abbr': 'atan2()'}, {'word': 'sinh', 'menu': 'Hyperbolic sine', 'kind': '[f]', 'abbr': 'sinh()'}, {'word': 'cosh', 'menu': 'Hyperbolic cosine', 'kind': '[f]', 'abbr': 'cosh()'}, {'word': 'tanh', 'menu': 'Hyperbolic tangent', 'kind': '[f]', 'abbr': 'tanh()'}, {'word': 'asinh', 'menu': 'Inverse hyperbolic sine', 'kind': '[f]', 'abbr': 'asinh()'}, {'word': 'acosh', 'menu': 'Inverse hyperbolic cosine', 'kind': '[f]', 'abbr': 'acosh()'}, {'word': 'expm1', 'menu': 'Returns exp(number) - 1, computed in a way that is accurate even   when the value of number is close to zero', 'kind': '[f]', 'abbr': 'expm1()'}, {'word': 'log1p', 'menu': 'Returns log(1 + number), computed in a way that is accurate even when   the value of number is close to zero', 'kind': '[f]', 'abbr': 'log1p()'}, {'word': 'pi', 'menu': 'Get value of pi', 'kind': '[f]', 'abbr': 'pi()'}, {'word': 'is_finite', 'menu': 'Finds whether a value is a legal finite number', 'kind': '[f]', 'abbr': 'is_finite()'}, {'word': 'is_nan', 'menu': 'Finds whether a value is not a number', 'kind': '[f]', 'abbr': 'is_nan()'}, {'word': 'is_infinite', 'menu': 'Finds whether a value is infinite', 'kind': '[f]', 'abbr': 'is_infinite()'}, {'word': 'pow', 'menu': 'Exponential expression', 'kind': '[f]', 'abbr': 'pow()'}, {'word': 'exp', 'menu': 'Calculates the exponent of e', 'kind': '[f]', 'abbr': 'exp()'}, {'word': 'log', 'menu': 'Natural logarithm', 'kind': '[f]', 'abbr': 'log()'}, {'word': 'log10', 'menu': 'Base-10 logarithm', 'kind': '[f]', 'abbr': 'log10()'}, {'word': 'sqrt', 'menu': 'Square root', 'kind': '[f]', 'abbr': 'sqrt()'}, {'word': 'hypot', 'menu': 'Calculate the length of the hypotenuse of a right-angle triangle', 'kind': '[f]', 'abbr': 'hypot()'}, {'word': 'deg2rad', 'menu': 'Converts the number in degrees to the radian equivalent', 'kind': '[f]', 'abbr': 'deg2rad()'}, {'word': 'rad2deg', 'menu': 'Converts the radian number to the equivalent number in degrees', 'kind': '[f]', 'abbr': 'rad2deg()'}, {'word': 'bindec', 'menu': 'Binary to decimal', 'kind': '[f]', 'abbr': 'bindec()'}, {'word': 'hexdec', 'menu': 'Hexadecimal to decimal', 'kind': '[f]', 'abbr': 'hexdec()'}, {'word': 'octdec', 'menu': 'Octal to decimal', 'kind': '[f]', 'abbr': 'octdec()'}, {'word': 'decbin', 'menu': 'Decimal to binary', 'kind': '[f]', 'abbr': 'decbin()'}, {'word': 'decoct', 'menu': 'Decimal to octal', 'kind': '[f]', 'abbr': 'decoct()'}, {'word': 'dechex', 'menu': 'Decimal to hexadecimal', 'kind': '[f]', 'abbr': 'dechex()'}, {'word': 'base_convert', 'menu': 'Convert a number between arbitrary bases', 'kind': '[f]', 'abbr': 'base_convert()'}, {'word': 'number_format', 'menu': 'Format a number with grouped thousands', 'kind': '[f]', 'abbr': 'number_format()'}, {'word': 'fmod', 'menu': 'Returns the floating point remainder (modulo) of the division  of the arguments', 'kind': '[f]', 'abbr': 'fmod()'}, {'word': 'inet_ntop', 'menu': 'Converts a packed internet address to a human readable representation', 'kind': '[f]', 'abbr': 'inet_ntop()'}, {'word': 'inet_pton', 'menu': 'Converts a human readable IP address to its packed in_addr representation', 'kind': '[f]', 'abbr': 'inet_pton()'}, {'word': 'ip2long', 'menu': 'Converts a string containing an (IPv4) Internet Protocol dotted address into a long integer', 'kind': '[f]', 'abbr': 'ip2long()'}, {'word': 'long2ip', 'menu': 'Converts an long integer address into a string in (IPv4) Internet standard dotted format', 'kind': '[f]', 'abbr': 'long2ip()'}, {'word': 'getenv', 'menu': 'Retrieve ENV varialbe', 'kind': '[f]', 'abbr': 'getenv()'}, {'word': 'putenv', 'menu': 'Sets the value of an environment variable', 'kind': '[f]', 'abbr': 'putenv()'}, {'word': 'getopt', 'menu': 'Get context option', 'kind': '[f]', 'abbr': 'getopt()'}, {'word': 'sys_getloadavg', 'menu': 'Gets system load average', 'kind': '[f]', 'abbr': 'sys_getloadavg()'}, {'word': 'microtime', 'menu': 'Return current Unix timestamp with microseconds', 'kind': '[f]', 'abbr': 'microtime()'}, {'word': 'gettimeofday', 'menu': 'Get current time', 'kind': '[f]', 'abbr': 'gettimeofday()'}, {'word': 'getrusage', 'menu': 'Gets the current resource usages', 'kind': '[f]', 'abbr': 'getrusage()'}, {'word': 'uniqid', 'menu': 'Generate a unique ID', 'kind': '[f]', 'abbr': 'uniqid()'}, {'word': 'quoted_printable_decode', 'menu': 'Convert a quoted-printable string to an 8 bit string', 'kind': '[f]', 'abbr': 'quoted_printable_decode()'}, {'word': 'quoted_printable_encode', 'menu': 'Convert a 8 bit string to a quoted-printable string', 'kind': '[f]', 'abbr': 'quoted_printable_encode()'}, {'word': 'convert_cyr_string', 'menu': 'Convert from one Cyrillic character set to another', 'kind': '[f]', 'abbr': 'convert_cyr_string()'}, {'word': 'get_current_user', 'menu': 'Gets the name of the owner of the current PHP script', 'kind': '[f]', 'abbr': 'get_current_user()'}, {'word': 'set_time_limit', 'menu': 'Limits the maximum execution time', 'kind': '[f]', 'abbr': 'set_time_limit()'}, {'word': 'header_register_callback', 'menu': 'Call a header function', 'kind': '[f]', 'abbr': 'header_register_callback()'}, {'word': 'get_cfg_var', 'menu': 'Gets the value of a PHP configuration option', 'kind': '[f]', 'abbr': 'get_cfg_var()'}, {'word': 'magic_quotes_runtime', 'menu': '&Alias; set_magic_quotes_runtime', 'kind': '[f]', 'abbr': 'magic_quotes_runtime()'}, {'word': 'set_magic_quotes_runtime', 'menu': 'Sets the current active configuration setting of magic_quotes_runtime', 'kind': '[f]', 'abbr': 'set_magic_quotes_runtime()'}, {'word': 'get_magic_quotes_gpc', 'menu': 'Gets the current configuration setting of magic_quotes_gpc', 'kind': '[f]', 'abbr': 'get_magic_quotes_gpc()'}, {'word': 'get_magic_quotes_runtime', 'menu': 'Gets the current active configuration setting of magic_quotes_runtime', 'kind': '[f]', 'abbr': 'get_magic_quotes_runtime()'}, {'word': 'error_log', 'menu': 'Send an error message to the defined error handling routines', 'kind': '[f]', 'abbr': 'error_log()'}, {'word': 'error_get_last', 'menu': 'Get the last occurred error', 'kind': '[f]', 'abbr': 'error_get_last()'}, {'word': 'call_user_func', 'menu': 'Call the callback given by the first parameter', 'kind': '[f]', 'abbr': 'call_user_func()'}, {'word': 'call_user_func_array', 'menu': 'Call a callback with an array of parameters', 'kind': '[f]', 'abbr': 'call_user_func_array()'}, {'word': 'call_user_method', 'menu': 'Call a user method on an specific object', 'kind': '[f]', 'abbr': 'call_user_method()'}, {'word': 'call_user_method_array', 'menu': 'Call a user method given with an array of parameters', 'kind': '[f]', 'abbr': 'call_user_method_array()'}, {'word': 'forward_static_call', 'menu': 'Call a static method', 'kind': '[f]', 'abbr': 'forward_static_call()'}, {'word': 'forward_static_call_array', 'menu': 'Call a static method and pass the arguments as array', 'kind': '[f]', 'abbr': 'forward_static_call_array()'}, {'word': 'serialize', 'menu': 'Generates a storable representation of a value', 'kind': '[f]', 'abbr': 'serialize()'}, {'word': 'unserialize', 'menu': 'Creates a PHP value from a stored representation', 'kind': '[f]', 'abbr': 'unserialize()'}, {'word': 'var_dump', 'menu': 'Dumps information about a variable', 'kind': '[f]', 'abbr': 'var_dump()'}, {'word': 'var_export', 'menu': 'Outputs or returns a parsable string representation of a variable', 'kind': '[f]', 'abbr': 'var_export()'}, {'word': 'debug_zval_dump', 'menu': 'Dumps a string representation of an internal zend value to output', 'kind': '[f]', 'abbr': 'debug_zval_dump()'}, {'word': 'print_r', 'menu': 'Prints human-readable information about a variable', 'kind': '[f]', 'abbr': 'print_r()'}, {'word': 'memory_get_usage', 'menu': 'Returns the amount of memory allocated to PHP', 'kind': '[f]', 'abbr': 'memory_get_usage()'}, {'word': 'memory_get_peak_usage', 'menu': 'Returns the peak of memory allocated by PHP', 'kind': '[f]', 'abbr': 'memory_get_peak_usage()'}, {'word': 'register_shutdown_function', 'menu': 'Register a function for execution on shutdown', 'kind': '[f]', 'abbr': 'register_shutdown_function()'}, {'word': 'register_tick_function', 'menu': 'Register a function for execution on each tick', 'kind': '[f]', 'abbr': 'register_tick_function()'}, {'word': 'unregister_tick_function', 'menu': 'De-register a function for execution on each tick', 'kind': '[f]', 'abbr': 'unregister_tick_function()'}, {'word': 'highlight_file', 'menu': 'Syntax highlighting of a file', 'kind': '[f]', 'abbr': 'highlight_file()'}, {'word': 'show_source', 'menu': '&Alias; highlight_file', 'kind': '[f]', 'abbr': 'show_source()'}, {'word': 'highlight_string', 'menu': 'Syntax highlighting of a string', 'kind': '[f]', 'abbr': 'highlight_string()'}, {'word': 'php_strip_whitespace', 'menu': 'Return source with stripped comments and whitespace', 'kind': '[f]', 'abbr': 'php_strip_whitespace()'}, {'word': 'ini_get', 'menu': 'Gets the value of a configuration option', 'kind': '[f]', 'abbr': 'ini_get()'}, {'word': 'ini_get_all', 'menu': 'Gets all configuration options', 'kind': '[f]', 'abbr': 'ini_get_all()'}, {'word': 'ini_set', 'menu': 'Sets the value of a configuration option', 'kind': '[f]', 'abbr': 'ini_set()'}, {'word': 'ini_alter', 'menu': '&Alias; ini_set', 'kind': '[f]', 'abbr': 'ini_alter()'}, {'word': 'ini_restore', 'menu': 'Restores the value of a configuration option', 'kind': '[f]', 'abbr': 'ini_restore()'}, {'word': 'get_include_path', 'menu': 'Gets the current include_path configuration option', 'kind': '[f]', 'abbr': 'get_include_path()'}, {'word': 'set_include_path', 'menu': 'Sets the include_path configuration option', 'kind': '[f]', 'abbr': 'set_include_path()'}, {'word': 'restore_include_path', 'menu': 'Restores the value of the include_path configuration option', 'kind': '[f]', 'abbr': 'restore_include_path()'}, {'word': 'setcookie', 'menu': 'The __setCookie purpose', 'kind': '[f]', 'abbr': 'setcookie()'}, {'word': 'setrawcookie', 'menu': 'Send a cookie without urlencoding the cookie value', 'kind': '[f]', 'abbr': 'setrawcookie()'}, {'word': 'header', 'menu': 'The header properties of the message.', 'kind': '[f]', 'abbr': 'header()'}, {'word': 'header_remove', 'menu': 'Remove previously set headers', 'kind': '[f]', 'abbr': 'header_remove()'}, {'word': 'headers_sent', 'menu': 'Checks if or where headers have been sent', 'kind': '[f]', 'abbr': 'headers_sent()'}, {'word': 'headers_list', 'menu': 'Returns a list of response headers sent (or ready to send)', 'kind': '[f]', 'abbr': 'headers_list()'}, {'word': 'http_response_code', 'menu': 'Get or Set the HTTP response code', 'kind': '[f]', 'abbr': 'http_response_code()'}, {'word': 'connection_aborted', 'menu': 'Check whether client disconnected', 'kind': '[f]', 'abbr': 'connection_aborted()'}, {'word': 'connection_status', 'menu': 'Returns connection status bitfield', 'kind': '[f]', 'abbr': 'connection_status()'}, {'word': 'ignore_user_abort', 'menu': 'Set whether a client disconnect should abort script execution', 'kind': '[f]', 'abbr': 'ignore_user_abort()'}, {'word': 'parse_ini_file', 'menu': 'Parse a configuration file', 'kind': '[f]', 'abbr': 'parse_ini_file()'}, {'word': 'parse_ini_string', 'menu': 'Parse a configuration string', 'kind': '[f]', 'abbr': 'parse_ini_string()'}, {'word': 'is_uploaded_file', 'menu': 'Tells whether the file was uploaded via HTTP POST', 'kind': '[f]', 'abbr': 'is_uploaded_file()'}, {'word': 'move_uploaded_file', 'menu': 'Moves an uploaded file to a new location', 'kind': '[f]', 'abbr': 'move_uploaded_file()'}, {'word': 'gethostbyaddr', 'menu': 'Get the Internet host name corresponding to a given IP address', 'kind': '[f]', 'abbr': 'gethostbyaddr()'}, {'word': 'gethostbyname', 'menu': 'Get the IPv4 address corresponding to a given Internet host name', 'kind': '[f]', 'abbr': 'gethostbyname()'}, {'word': 'gethostbynamel', 'menu': 'Get a list of IPv4 addresses corresponding to a given Internet host   name', 'kind': '[f]', 'abbr': 'gethostbynamel()'}, {'word': 'gethostname', 'menu': 'Gets the host name', 'kind': '[f]', 'abbr': 'gethostname()'}, {'word': 'dns_check_record', 'menu': '&Alias; checkdnsrr', 'kind': '[f]', 'abbr': 'dns_check_record()'}, {'word': 'checkdnsrr', 'menu': 'Check DNS records corresponding to a given Internet host name or IP address', 'kind': '[f]', 'abbr': 'checkdnsrr()'}, {'word': 'dns_get_mx', 'menu': '&Alias; getmxrr', 'kind': '[f]', 'abbr': 'dns_get_mx()'}, {'word': 'getmxrr', 'menu': 'Get MX records corresponding to a given Internet host name', 'kind': '[f]', 'abbr': 'getmxrr()'}, {'word': 'dns_get_record', 'menu': 'Fetch DNS Resource Records associated with a hostname', 'kind': '[f]', 'abbr': 'dns_get_record()'}, {'word': 'intval', 'menu': 'Get the integer value of a variable', 'kind': '[f]', 'abbr': 'intval()'}, {'word': 'floatval', 'menu': 'Get float value of a variable', 'kind': '[f]', 'abbr': 'floatval()'}, {'word': 'doubleval', 'menu': '&Alias; floatval', 'kind': '[f]', 'abbr': 'doubleval()'}, {'word': 'strval', 'menu': 'Get string value of a variable', 'kind': '[f]', 'abbr': 'strval()'}, {'word': 'boolval', 'menu': 'Get the boolean value of a variable', 'kind': '[f]', 'abbr': 'boolval()'}, {'word': 'gettype', 'menu': 'The getType purpose', 'kind': '[f]', 'abbr': 'gettype()'}, {'word': 'settype', 'menu': 'Set the type of a variable', 'kind': '[f]', 'abbr': 'settype()'}, {'word': 'is_null', 'menu': 'Finds whether a variable is &null;', 'kind': '[f]', 'abbr': 'is_null()'}, {'word': 'is_resource', 'menu': 'Finds whether a variable is a resource', 'kind': '[f]', 'abbr': 'is_resource()'}, {'word': 'is_bool', 'menu': 'Finds out whether a variable is a boolean', 'kind': '[f]', 'abbr': 'is_bool()'}, {'word': 'is_long', 'menu': '&Alias; is_int', 'kind': '[f]', 'abbr': 'is_long()'}, {'word': 'is_float', 'menu': 'Finds whether the type of a variable is float', 'kind': '[f]', 'abbr': 'is_float()'}, {'word': 'is_int', 'menu': 'Find whether the type of a variable is integer', 'kind': '[f]', 'abbr': 'is_int()'}, {'word': 'is_integer', 'menu': '&Alias; is_int', 'kind': '[f]', 'abbr': 'is_integer()'}, {'word': 'is_double', 'menu': '&Alias; is_float', 'kind': '[f]', 'abbr': 'is_double()'}, {'word': 'is_real', 'menu': '&Alias; is_float', 'kind': '[f]', 'abbr': 'is_real()'}, {'word': 'is_numeric', 'menu': 'Finds whether a variable is a number or a numeric string', 'kind': '[f]', 'abbr': 'is_numeric()'}, {'word': 'is_string', 'menu': 'Find whether the type of a variable is string', 'kind': '[f]', 'abbr': 'is_string()'}, {'word': 'is_array', 'menu': 'Finds whether a variable is an array', 'kind': '[f]', 'abbr': 'is_array()'}, {'word': 'is_object', 'menu': 'Finds whether a variable is an object', 'kind': '[f]', 'abbr': 'is_object()'}, {'word': 'is_scalar', 'menu': 'Finds whether a variable is a scalar', 'kind': '[f]', 'abbr': 'is_scalar()'}, {'word': 'is_callable', 'menu': 'Verify that the contents of a variable can be called as a function', 'kind': '[f]', 'abbr': 'is_callable()'}, {'word': 'pclose', 'menu': 'Closes process file pointer', 'kind': '[f]', 'abbr': 'pclose()'}, {'word': 'popen', 'menu': 'Opens process file pointer', 'kind': '[f]', 'abbr': 'popen()'}, {'word': 'readfile', 'menu': 'Outputs a file', 'kind': '[f]', 'abbr': 'readfile()'}, {'word': 'rewind', 'menu': 'The rewind purpose', 'kind': '[f]', 'abbr': 'rewind()'}, {'word': 'rmdir', 'menu': 'Removes a directory', 'kind': '[f]', 'abbr': 'rmdir()'}, {'word': 'umask', 'menu': 'Changes the current umask', 'kind': '[f]', 'abbr': 'umask()'}, {'word': 'fclose', 'menu': 'Closes an open file pointer', 'kind': '[f]', 'abbr': 'fclose()'}, {'word': 'feof', 'menu': 'Tests for end-of-file on a file pointer', 'kind': '[f]', 'abbr': 'feof()'}, {'word': 'fgetc', 'menu': 'Gets character from file', 'kind': '[f]', 'abbr': 'fgetc()'}, {'word': 'fgets', 'menu': 'Gets line from file', 'kind': '[f]', 'abbr': 'fgets()'}, {'word': 'fgetss', 'menu': 'Gets line from file and strip HTML tags', 'kind': '[f]', 'abbr': 'fgetss()'}, {'word': 'fread', 'menu': 'Read from file', 'kind': '[f]', 'abbr': 'fread()'}, {'word': 'fopen', 'menu': 'Opens file or URL', 'kind': '[f]', 'abbr': 'fopen()'}, {'word': 'fpassthru', 'menu': 'Output all remaining data on a file pointer', 'kind': '[f]', 'abbr': 'fpassthru()'}, {'word': 'ftruncate', 'menu': 'Truncates the file to a given length', 'kind': '[f]', 'abbr': 'ftruncate()'}, {'word': 'fstat', 'menu': 'Gets information about the file', 'kind': '[f]', 'abbr': 'fstat()'}, {'word': 'fseek', 'menu': 'Seek to a position', 'kind': '[f]', 'abbr': 'fseek()'}, {'word': 'ftell', 'menu': 'Return current file position', 'kind': '[f]', 'abbr': 'ftell()'}, {'word': 'fflush', 'menu': 'Flushes the output to the file', 'kind': '[f]', 'abbr': 'fflush()'}, {'word': 'fwrite', 'menu': 'Write to file', 'kind': '[f]', 'abbr': 'fwrite()'}, {'word': 'fputs', 'menu': '&Alias; fwrite', 'kind': '[f]', 'abbr': 'fputs()'}, {'word': 'mkdir', 'menu': 'Create a directory', 'kind': '[f]', 'abbr': 'mkdir()'}, {'word': 'rename', 'menu': 'Renames a file or directory', 'kind': '[f]', 'abbr': 'rename()'}, {'word': 'copy', 'menu': 'Copies the database', 'kind': '[f]', 'abbr': 'copy()'}, {'word': 'tempnam', 'menu': 'Create file with unique file name', 'kind': '[f]', 'abbr': 'tempnam()'}, {'word': 'tmpfile', 'menu': 'Creates a temporary file', 'kind': '[f]', 'abbr': 'tmpfile()'}, {'word': 'file', 'menu': 'Reads entire file into an array', 'kind': '[f]', 'abbr': 'file()'}, {'word': 'file_get_contents', 'menu': 'Reads entire file into a string', 'kind': '[f]', 'abbr': 'file_get_contents()'}, {'word': 'file_put_contents', 'menu': 'Write a string to a file', 'kind': '[f]', 'abbr': 'file_put_contents()'}, {'word': 'stream_select', 'menu': 'Runs the equivalent of the select() system call on the given   arrays of streams with a timeout specified by tv_sec and tv_usec', 'kind': '[f]', 'abbr': 'stream_select()'}, {'word': 'stream_context_create', 'menu': 'Creates a stream context', 'kind': '[f]', 'abbr': 'stream_context_create()'}, {'word': 'stream_context_set_params', 'menu': 'Set parameters for a stream/wrapper/context', 'kind': '[f]', 'abbr': 'stream_context_set_params()'}, {'word': 'stream_context_get_params', 'menu': 'Retrieves parameters from a context', 'kind': '[f]', 'abbr': 'stream_context_get_params()'}, {'word': 'stream_context_set_option', 'menu': 'Sets an option for a stream/wrapper/context', 'kind': '[f]', 'abbr': 'stream_context_set_option()'}, {'word': 'stream_context_get_options', 'menu': 'Retrieve options for a stream/wrapper/context', 'kind': '[f]', 'abbr': 'stream_context_get_options()'}, {'word': 'stream_context_get_default', 'menu': 'Retrieve the default stream context', 'kind': '[f]', 'abbr': 'stream_context_get_default()'}, {'word': 'stream_context_set_default', 'menu': 'Set the default stream context', 'kind': '[f]', 'abbr': 'stream_context_set_default()'}, {'word': 'stream_filter_prepend', 'menu': 'Attach a filter to a stream', 'kind': '[f]', 'abbr': 'stream_filter_prepend()'}, {'word': 'stream_filter_append', 'menu': 'Attach a filter to a stream', 'kind': '[f]', 'abbr': 'stream_filter_append()'}, {'word': 'stream_filter_remove', 'menu': 'Remove a filter from a stream', 'kind': '[f]', 'abbr': 'stream_filter_remove()'}, {'word': 'stream_socket_client', 'menu': 'Open Internet or Unix domain socket connection', 'kind': '[f]', 'abbr': 'stream_socket_client()'}, {'word': 'stream_socket_server', 'menu': 'Create an Internet or Unix domain server socket', 'kind': '[f]', 'abbr': 'stream_socket_server()'}, {'word': 'stream_socket_accept', 'menu': 'Accept a connection on a socket created by stream_socket_server', 'kind': '[f]', 'abbr': 'stream_socket_accept()'}, {'word': 'stream_socket_get_name', 'menu': 'Retrieve the name of the local or remote sockets', 'kind': '[f]', 'abbr': 'stream_socket_get_name()'}, {'word': 'stream_socket_recvfrom', 'menu': 'Receives data from a socket, connected or not', 'kind': '[f]', 'abbr': 'stream_socket_recvfrom()'}, {'word': 'stream_socket_sendto', 'menu': 'Sends a message to a socket, whether it is connected or not', 'kind': '[f]', 'abbr': 'stream_socket_sendto()'}, {'word': 'stream_socket_enable_crypto', 'menu': 'Turns encryption on/off on an already connected socket', 'kind': '[f]', 'abbr': 'stream_socket_enable_crypto()'}, {'word': 'stream_socket_shutdown', 'menu': 'Shutdown a full-duplex connection', 'kind': '[f]', 'abbr': 'stream_socket_shutdown()'}, {'word': 'stream_socket_pair', 'menu': 'Creates a pair of connected, indistinguishable socket streams', 'kind': '[f]', 'abbr': 'stream_socket_pair()'}, {'word': 'stream_copy_to_stream', 'menu': 'Copies data from one stream to another', 'kind': '[f]', 'abbr': 'stream_copy_to_stream()'}, {'word': 'stream_get_contents', 'menu': 'Reads remainder of a stream into a string', 'kind': '[f]', 'abbr': 'stream_get_contents()'}, {'word': 'stream_supports_lock', 'menu': 'Tells whether the stream supports locking.', 'kind': '[f]', 'abbr': 'stream_supports_lock()'}, {'word': 'fgetcsv', 'menu': 'Gets line from file and parse as CSV fields', 'kind': '[f]', 'abbr': 'fgetcsv()'}, {'word': 'fputcsv', 'menu': 'Write a field array as a CSV line', 'kind': '[f]', 'abbr': 'fputcsv()'}, {'word': 'flock', 'menu': 'Portable file locking', 'kind': '[f]', 'abbr': 'flock()'}, {'word': 'get_meta_tags', 'menu': 'Extracts all meta tag content attributes from a file and returns an array', 'kind': '[f]', 'abbr': 'get_meta_tags()'}, {'word': 'stream_set_read_buffer', 'menu': 'Set read file buffering on the given stream', 'kind': '[f]', 'abbr': 'stream_set_read_buffer()'}, {'word': 'stream_set_write_buffer', 'menu': 'Sets write file buffering on the given stream', 'kind': '[f]', 'abbr': 'stream_set_write_buffer()'}, {'word': 'set_file_buffer', 'menu': '&Alias; stream_set_write_buffer', 'kind': '[f]', 'abbr': 'set_file_buffer()'}, {'word': 'stream_set_chunk_size', 'menu': 'Set the stream chunk size', 'kind': '[f]', 'abbr': 'stream_set_chunk_size()'}, {'word': 'set_socket_blocking', 'menu': '&Alias; stream_set_blocking', 'kind': '[f]', 'abbr': 'set_socket_blocking()'}, {'word': 'stream_set_blocking', 'menu': 'Set blocking/non-blocking mode on a stream', 'kind': '[f]', 'abbr': 'stream_set_blocking()'}, {'word': 'socket_set_blocking', 'menu': '&Alias; stream_set_blocking', 'kind': '[f]', 'abbr': 'socket_set_blocking()'}, {'word': 'stream_get_meta_data', 'menu': 'Retrieves header/meta data from streams/file pointers', 'kind': '[f]', 'abbr': 'stream_get_meta_data()'}, {'word': 'stream_get_line', 'menu': 'Gets line from stream resource up to a given delimiter', 'kind': '[f]', 'abbr': 'stream_get_line()'}, {'word': 'stream_wrapper_register', 'menu': 'Register a URL wrapper implemented as a PHP class', 'kind': '[f]', 'abbr': 'stream_wrapper_register()'}, {'word': 'stream_register_wrapper', 'menu': '&Alias; stream_wrapper_register', 'kind': '[f]', 'abbr': 'stream_register_wrapper()'}, {'word': 'stream_wrapper_unregister', 'menu': 'Unregister a URL wrapper', 'kind': '[f]', 'abbr': 'stream_wrapper_unregister()'}, {'word': 'stream_wrapper_restore', 'menu': 'Restores a previously unregistered built-in wrapper', 'kind': '[f]', 'abbr': 'stream_wrapper_restore()'}, {'word': 'stream_get_wrappers', 'menu': 'Retrieve list of registered streams', 'kind': '[f]', 'abbr': 'stream_get_wrappers()'}, {'word': 'stream_get_transports', 'menu': 'Retrieve list of registered socket transports', 'kind': '[f]', 'abbr': 'stream_get_transports()'}, {'word': 'stream_resolve_include_path', 'menu': 'Resolve filename against the include path', 'kind': '[f]', 'abbr': 'stream_resolve_include_path()'}, {'word': 'stream_is_local', 'menu': 'Checks if a stream is a local stream', 'kind': '[f]', 'abbr': 'stream_is_local()'}, {'word': 'get_headers', 'menu': 'Fetches all the headers sent by the server in response to a HTTP request', 'kind': '[f]', 'abbr': 'get_headers()'}, {'word': 'stream_set_timeout', 'menu': 'Set timeout period on a stream', 'kind': '[f]', 'abbr': 'stream_set_timeout()'}, {'word': 'socket_set_timeout', 'menu': '&Alias; stream_set_timeout', 'kind': '[f]', 'abbr': 'socket_set_timeout()'}, {'word': 'socket_get_status', 'menu': '&Alias; stream_get_meta_data', 'kind': '[f]', 'abbr': 'socket_get_status()'}, {'word': 'realpath', 'menu': 'Returns canonicalized absolute pathname', 'kind': '[f]', 'abbr': 'realpath()'}, {'word': 'fnmatch', 'menu': 'Match filename against a pattern', 'kind': '[f]', 'abbr': 'fnmatch()'}, {'word': 'fsockopen', 'menu': 'Open Internet or Unix domain socket connection', 'kind': '[f]', 'abbr': 'fsockopen()'}, {'word': 'pfsockopen', 'menu': 'Open persistent Internet or Unix domain socket connection', 'kind': '[f]', 'abbr': 'pfsockopen()'}, {'word': 'pack', 'menu': 'Pack data into binary string', 'kind': '[f]', 'abbr': 'pack()'}, {'word': 'unpack', 'menu': 'Unpack data from binary string', 'kind': '[f]', 'abbr': 'unpack()'}, {'word': 'get_browser', 'menu': 'Tells what the user''s browser is capable of', 'kind': '[f]', 'abbr': 'get_browser()'}, {'word': 'crypt', 'menu': 'One-way string hashing', 'kind': '[f]', 'abbr': 'crypt()'}, {'word': 'opendir', 'menu': 'Open directory handle', 'kind': '[f]', 'abbr': 'opendir()'}, {'word': 'closedir', 'menu': 'Close directory handle', 'kind': '[f]', 'abbr': 'closedir()'}, {'word': 'chdir', 'menu': 'Change directory', 'kind': '[f]', 'abbr': 'chdir()'}, {'word': 'getcwd', 'menu': 'Gets the current working directory', 'kind': '[f]', 'abbr': 'getcwd()'}, {'word': 'rewinddir', 'menu': 'Rewind directory handle', 'kind': '[f]', 'abbr': 'rewinddir()'}, {'word': 'readdir', 'menu': 'Read entry from directory handle', 'kind': '[f]', 'abbr': 'readdir()'}, {'word': 'dir', 'menu': 'Return an instance of the Directory class', 'kind': '[f]', 'abbr': 'dir()'}, {'word': 'scandir', 'menu': 'List files and directories inside the specified path', 'kind': '[f]', 'abbr': 'scandir()'}, {'word': 'glob', 'menu': 'Find pathnames matching a pattern', 'kind': '[f]', 'abbr': 'glob()'}, {'word': 'fileatime', 'menu': 'Gets last access time of file', 'kind': '[f]', 'abbr': 'fileatime()'}, {'word': 'filectime', 'menu': 'Gets inode change time of file', 'kind': '[f]', 'abbr': 'filectime()'}, {'word': 'filegroup', 'menu': 'Gets file group', 'kind': '[f]', 'abbr': 'filegroup()'}, {'word': 'fileinode', 'menu': 'Gets file inode', 'kind': '[f]', 'abbr': 'fileinode()'}, {'word': 'filemtime', 'menu': 'Gets file modification time', 'kind': '[f]', 'abbr': 'filemtime()'}, {'word': 'fileowner', 'menu': 'Gets file owner', 'kind': '[f]', 'abbr': 'fileowner()'}, {'word': 'fileperms', 'menu': 'Gets file permissions', 'kind': '[f]', 'abbr': 'fileperms()'}, {'word': 'filesize', 'menu': 'Gets file size', 'kind': '[f]', 'abbr': 'filesize()'}, {'word': 'filetype', 'menu': 'Gets file type', 'kind': '[f]', 'abbr': 'filetype()'}, {'word': 'file_exists', 'menu': 'Checks whether a file or directory exists', 'kind': '[f]', 'abbr': 'file_exists()'}, {'word': 'is_writable', 'menu': 'Tells whether the filename is writable', 'kind': '[f]', 'abbr': 'is_writable()'}, {'word': 'is_writeable', 'menu': '&Alias; is_writable', 'kind': '[f]', 'abbr': 'is_writeable()'}, {'word': 'is_readable', 'menu': 'Tells whether a file exists and is readable', 'kind': '[f]', 'abbr': 'is_readable()'}, {'word': 'is_executable', 'menu': 'Tells whether the filename is executable', 'kind': '[f]', 'abbr': 'is_executable()'}, {'word': 'is_file', 'menu': 'Tells whether the filename is a regular file', 'kind': '[f]', 'abbr': 'is_file()'}, {'word': 'is_dir', 'menu': 'Tells whether the filename is a directory', 'kind': '[f]', 'abbr': 'is_dir()'}, {'word': 'is_link', 'menu': 'Tells whether the filename is a symbolic link', 'kind': '[f]', 'abbr': 'is_link()'}, {'word': 'stat', 'menu': 'Get statistics', 'kind': '[f]', 'abbr': 'stat()'}, {'word': 'lstat', 'menu': 'Gives information about a file or symbolic link', 'kind': '[f]', 'abbr': 'lstat()'}, {'word': 'chown', 'menu': 'Changes file owner', 'kind': '[f]', 'abbr': 'chown()'}, {'word': 'chgrp', 'menu': 'Changes file group', 'kind': '[f]', 'abbr': 'chgrp()'}, {'word': 'lchown', 'menu': 'Changes user ownership of symlink', 'kind': '[f]', 'abbr': 'lchown()'}, {'word': 'lchgrp', 'menu': 'Changes group ownership of symlink', 'kind': '[f]', 'abbr': 'lchgrp()'}, {'word': 'chmod', 'menu': 'Sets file-specific permission bits', 'kind': '[f]', 'abbr': 'chmod()'}, {'word': 'touch', 'menu': 'Set a new expiration on an item', 'kind': '[f]', 'abbr': 'touch()'}, {'word': 'clearstatcache', 'menu': 'Clears file status cache', 'kind': '[f]', 'abbr': 'clearstatcache()'}, {'word': 'disk_total_space', 'menu': 'Returns the total size of a filesystem or disk partition', 'kind': '[f]', 'abbr': 'disk_total_space()'}, {'word': 'disk_free_space', 'menu': 'Returns available space on filesystem or disk partition', 'kind': '[f]', 'abbr': 'disk_free_space()'}, {'word': 'diskfreespace', 'menu': '&Alias; disk_free_space', 'kind': '[f]', 'abbr': 'diskfreespace()'}, {'word': 'realpath_cache_size', 'menu': 'Get realpath cache size', 'kind': '[f]', 'abbr': 'realpath_cache_size()'}, {'word': 'realpath_cache_get', 'menu': 'Get realpath cache entries', 'kind': '[f]', 'abbr': 'realpath_cache_get()'}, {'word': 'mail', 'menu': 'Send mail', 'kind': '[f]', 'abbr': 'mail()'}, {'word': 'ezmlm_hash', 'menu': 'Calculate the hash value needed by EZMLM', 'kind': '[f]', 'abbr': 'ezmlm_hash()'}, {'word': 'openlog', 'menu': 'Open connection to system logger', 'kind': '[f]', 'abbr': 'openlog()'}, {'word': 'syslog', 'menu': 'Generate a system log message', 'kind': '[f]', 'abbr': 'syslog()'}, {'word': 'closelog', 'menu': 'Close connection to system logger', 'kind': '[f]', 'abbr': 'closelog()'}, {'word': 'lcg_value', 'menu': 'Combined linear congruential generator', 'kind': '[f]', 'abbr': 'lcg_value()'}, {'word': 'metaphone', 'menu': 'Calculate the metaphone key of a string', 'kind': '[f]', 'abbr': 'metaphone()'}, {'word': 'ob_start', 'menu': 'Turn on output buffering', 'kind': '[f]', 'abbr': 'ob_start()'}, {'word': 'ob_flush', 'menu': 'Flush (send) the output buffer', 'kind': '[f]', 'abbr': 'ob_flush()'}, {'word': 'ob_clean', 'menu': 'Clean (erase) the output buffer', 'kind': '[f]', 'abbr': 'ob_clean()'}, {'word': 'ob_end_flush', 'menu': 'Flush (send) the output buffer and turn off output buffering', 'kind': '[f]', 'abbr': 'ob_end_flush()'}, {'word': 'ob_end_clean', 'menu': 'Clean (erase) the output buffer and turn off output buffering', 'kind': '[f]', 'abbr': 'ob_end_clean()'}, {'word': 'ob_get_flush', 'menu': 'Flush the output buffer, return it as a string and turn off output buffering', 'kind': '[f]', 'abbr': 'ob_get_flush()'}, {'word': 'ob_get_clean', 'menu': 'Get current buffer contents and delete current output buffer', 'kind': '[f]', 'abbr': 'ob_get_clean()'}, {'word': 'ob_get_length', 'menu': 'Return the length of the output buffer', 'kind': '[f]', 'abbr': 'ob_get_length()'}, {'word': 'ob_get_level', 'menu': 'Return the nesting level of the output buffering mechanism', 'kind': '[f]', 'abbr': 'ob_get_level()'}, {'word': 'ob_get_status', 'menu': 'Get status of output buffers', 'kind': '[f]', 'abbr': 'ob_get_status()'}, {'word': 'ob_get_contents', 'menu': 'Return the contents of the output buffer', 'kind': '[f]', 'abbr': 'ob_get_contents()'}, {'word': 'ob_implicit_flush', 'menu': 'Turn implicit flush on/off', 'kind': '[f]', 'abbr': 'ob_implicit_flush()'}, {'word': 'ob_list_handlers', 'menu': 'List all output handlers in use', 'kind': '[f]', 'abbr': 'ob_list_handlers()'}, {'word': 'ksort', 'menu': 'Sort array by keys', 'kind': '[f]', 'abbr': 'ksort()'}, {'word': 'krsort', 'menu': 'Sort an array by key in reverse order', 'kind': '[f]', 'abbr': 'krsort()'}, {'word': 'natsort', 'menu': 'Sort an array naturally', 'kind': '[f]', 'abbr': 'natsort()'}, {'word': 'natcasesort', 'menu': 'Sort an array naturally, case insensitive', 'kind': '[f]', 'abbr': 'natcasesort()'}, {'word': 'asort', 'menu': 'Sort array by values', 'kind': '[f]', 'abbr': 'asort()'}, {'word': 'arsort', 'menu': 'Sort an array in reverse order and maintain index association', 'kind': '[f]', 'abbr': 'arsort()'}, {'word': 'sort', 'menu': 'Sorts the fields in the document', 'kind': '[f]', 'abbr': 'sort()'}, {'word': 'rsort', 'menu': 'Sort an array in reverse order', 'kind': '[f]', 'abbr': 'rsort()'}, {'word': 'usort', 'menu': 'Sort an array by values using a user-defined comparison function', 'kind': '[f]', 'abbr': 'usort()'}, {'word': 'uasort', 'menu': 'User defined sort', 'kind': '[f]', 'abbr': 'uasort()'}, {'word': 'uksort', 'menu': 'User defined sort', 'kind': '[f]', 'abbr': 'uksort()'}, {'word': 'shuffle', 'menu': 'Shuffle an array', 'kind': '[f]', 'abbr': 'shuffle()'}, {'word': 'array_walk', 'menu': 'Apply a user supplied function to every member of an array', 'kind': '[f]', 'abbr': 'array_walk()'}, {'word': 'array_walk_recursive', 'menu': 'Apply a user function recursively to every member of an array', 'kind': '[f]', 'abbr': 'array_walk_recursive()'}, {'word': 'count', 'menu': 'Count items in the poll set', 'kind': '[f]', 'abbr': 'count()'}, {'word': 'end', 'menu': 'Set the internal pointer of an array to its last element', 'kind': '[f]', 'abbr': 'end()'}, {'word': 'prev', 'menu': 'Move to previous entry', 'kind': '[f]', 'abbr': 'prev()'}, {'word': 'next', 'menu': 'The next purpose', 'kind': '[f]', 'abbr': 'next()'}, {'word': 'reset', 'menu': 'Clean all registered calls', 'kind': '[f]', 'abbr': 'reset()'}, {'word': 'current', 'menu': 'The current purpose', 'kind': '[f]', 'abbr': 'current()'}, {'word': 'key', 'menu': 'The key purpose', 'kind': '[f]', 'abbr': 'key()'}, {'word': 'min', 'menu': 'Find lowest value', 'kind': '[f]', 'abbr': 'min()'}, {'word': 'max', 'menu': 'Returns the maximum number of elements in the collection', 'kind': '[f]', 'abbr': 'max()'}, {'word': 'in_array', 'menu': 'Checks if a value exists in an array', 'kind': '[f]', 'abbr': 'in_array()'}, {'word': 'array_search', 'menu': 'Searches the array for a given value and returns the first corresponding key if successful', 'kind': '[f]', 'abbr': 'array_search()'}, {'word': 'extract', 'menu': 'Extracts a node from top of the heap and sift up.', 'kind': '[f]', 'abbr': 'extract()'}, {'word': 'compact', 'menu': 'Create array containing variables and their values', 'kind': '[f]', 'abbr': 'compact()'}, {'word': 'array_fill', 'menu': 'Fill an array with values', 'kind': '[f]', 'abbr': 'array_fill()'}, {'word': 'array_fill_keys', 'menu': 'Fill an array with values, specifying keys', 'kind': '[f]', 'abbr': 'array_fill_keys()'}, {'word': 'range', 'menu': 'Create an array containing a range of elements', 'kind': '[f]', 'abbr': 'range()'}, {'word': 'array_multisort', 'menu': 'Sort multiple or multi-dimensional arrays', 'kind': '[f]', 'abbr': 'array_multisort()'}, {'word': 'array_push', 'menu': 'Push one or more elements onto the end of array', 'kind': '[f]', 'abbr': 'array_push()'}, {'word': 'array_pop', 'menu': 'Pop the element off the end of array', 'kind': '[f]', 'abbr': 'array_pop()'}, {'word': 'array_shift', 'menu': 'Shift an element off the beginning of array', 'kind': '[f]', 'abbr': 'array_shift()'}, {'word': 'array_unshift', 'menu': 'Prepend one or more elements to the beginning of an array', 'kind': '[f]', 'abbr': 'array_unshift()'}, {'word': 'array_splice', 'menu': 'Remove a portion of the array and replace it with something else', 'kind': '[f]', 'abbr': 'array_splice()'}, {'word': 'array_slice', 'menu': 'Extract a slice of the array', 'kind': '[f]', 'abbr': 'array_slice()'}, {'word': 'array_merge', 'menu': 'Merge one or more arrays', 'kind': '[f]', 'abbr': 'array_merge()'}, {'word': 'array_merge_recursive', 'menu': 'Merge two or more arrays recursively', 'kind': '[f]', 'abbr': 'array_merge_recursive()'}, {'word': 'array_replace', 'menu': 'Replaces elements from passed arrays into the first array', 'kind': '[f]', 'abbr': 'array_replace()'}, {'word': 'array_replace_recursive', 'menu': 'Replaces elements from passed arrays into the first array recursively', 'kind': '[f]', 'abbr': 'array_replace_recursive()'}, {'word': 'array_keys', 'menu': 'Return all the keys or a subset of the keys of an array', 'kind': '[f]', 'abbr': 'array_keys()'}, {'word': 'array_values', 'menu': 'Return all the values of an array', 'kind': '[f]', 'abbr': 'array_values()'}, {'word': 'array_count_values', 'menu': 'Counts all the values of an array', 'kind': '[f]', 'abbr': 'array_count_values()'}, {'word': 'array_column', 'menu': 'Return the values from a single column in the input array', 'kind': '[f]', 'abbr': 'array_column()'}, {'word': 'array_reverse', 'menu': 'Return an array with elements in reverse order', 'kind': '[f]', 'abbr': 'array_reverse()'}, {'word': 'array_reduce', 'menu': 'Iteratively reduce the array to a single value using a callback function', 'kind': '[f]', 'abbr': 'array_reduce()'}, {'word': 'array_pad', 'menu': 'Pad array to the specified length with a value', 'kind': '[f]', 'abbr': 'array_pad()'}, {'word': 'array_flip', 'menu': 'Exchanges all keys with their associated values in an array', 'kind': '[f]', 'abbr': 'array_flip()'}, {'word': 'array_change_key_case', 'menu': 'Changes the case of all keys in an array', 'kind': '[f]', 'abbr': 'array_change_key_case()'}, {'word': 'array_rand', 'menu': 'Pick one or more random entries out of an array', 'kind': '[f]', 'abbr': 'array_rand()'}, {'word': 'array_unique', 'menu': 'Removes duplicate values from an array', 'kind': '[f]', 'abbr': 'array_unique()'}, {'word': 'array_intersect', 'menu': 'Computes the intersection of arrays', 'kind': '[f]', 'abbr': 'array_intersect()'}, {'word': 'array_intersect_key', 'menu': 'Computes the intersection of arrays using keys for comparison', 'kind': '[f]', 'abbr': 'array_intersect_key()'}, {'word': 'array_intersect_ukey', 'menu': 'Computes the intersection of arrays using a callback function on the keys for comparison', 'kind': '[f]', 'abbr': 'array_intersect_ukey()'}, {'word': 'array_uintersect', 'menu': 'Computes the intersection of arrays, compares data by a callback function', 'kind': '[f]', 'abbr': 'array_uintersect()'}, {'word': 'array_intersect_assoc', 'menu': 'Computes the intersection of arrays with additional index check', 'kind': '[f]', 'abbr': 'array_intersect_assoc()'}, {'word': 'array_uintersect_assoc', 'menu': 'Computes the intersection of arrays with additional index check, compares data by a callback function', 'kind': '[f]', 'abbr': 'array_uintersect_assoc()'}, {'word': 'array_intersect_uassoc', 'menu': 'Computes the intersection of arrays with additional index check, compares indexes by a callback function', 'kind': '[f]', 'abbr': 'array_intersect_uassoc()'}, {'word': 'array_uintersect_uassoc', 'menu': 'Computes the intersection of arrays with additional index check, compares data and indexes by separate callback functions', 'kind': '[f]', 'abbr': 'array_uintersect_uassoc()'}, {'word': 'array_diff', 'menu': 'Computes the difference of arrays', 'kind': '[f]', 'abbr': 'array_diff()'}, {'word': 'array_diff_key', 'menu': 'Computes the difference of arrays using keys for comparison', 'kind': '[f]', 'abbr': 'array_diff_key()'}, {'word': 'array_diff_ukey', 'menu': 'Computes the difference of arrays using a callback function on the keys for comparison', 'kind': '[f]', 'abbr': 'array_diff_ukey()'}, {'word': 'array_udiff', 'menu': 'Computes the difference of arrays by using a callback function for data comparison', 'kind': '[f]', 'abbr': 'array_udiff()'}, {'word': 'array_diff_assoc', 'menu': 'Computes the difference of arrays with additional index check', 'kind': '[f]', 'abbr': 'array_diff_assoc()'}, {'word': 'array_udiff_assoc', 'menu': 'Computes the difference of arrays with additional index check, compares data by a callback function', 'kind': '[f]', 'abbr': 'array_udiff_assoc()'}, {'word': 'array_diff_uassoc', 'menu': 'Computes the difference of arrays with additional index check which is performed by a user supplied callback function', 'kind': '[f]', 'abbr': 'array_diff_uassoc()'}, {'word': 'array_udiff_uassoc', 'menu': 'Computes the difference of arrays with additional index check, compares data and indexes by a callback function', 'kind': '[f]', 'abbr': 'array_udiff_uassoc()'}, {'word': 'array_sum', 'menu': 'Calculate the sum of values in an array', 'kind': '[f]', 'abbr': 'array_sum()'}, {'word': 'array_product', 'menu': 'Calculate the product of values in an array', 'kind': '[f]', 'abbr': 'array_product()'}, {'word': 'array_filter', 'menu': 'Filters elements of an array using a callback function', 'kind': '[f]', 'abbr': 'array_filter()'}, {'word': 'array_map', 'menu': 'Applies the callback to the elements of the given arrays', 'kind': '[f]', 'abbr': 'array_map()'}, {'word': 'array_chunk', 'menu': 'Split an array into chunks', 'kind': '[f]', 'abbr': 'array_chunk()'}, {'word': 'array_combine', 'menu': 'Creates an array by using one array for keys and another for its values', 'kind': '[f]', 'abbr': 'array_combine()'}, {'word': 'array_key_exists', 'menu': 'Checks if the given key or index exists in the array', 'kind': '[f]', 'abbr': 'array_key_exists()'}, {'word': 'pos', 'menu': '&Alias; current', 'kind': '[f]', 'abbr': 'pos()'}, {'word': 'sizeof', 'menu': '&Alias; count', 'kind': '[f]', 'abbr': 'sizeof()'}, {'word': 'key_exists', 'menu': '&Alias; array_key_exists', 'kind': '[f]', 'abbr': 'key_exists()'}, {'word': 'assert', 'menu': 'Checks if assertion is &false;', 'kind': '[f]', 'abbr': 'assert()'}, {'word': 'assert_options', 'menu': 'Set/get the various assert flags', 'kind': '[f]', 'abbr': 'assert_options()'}, {'word': 'version_compare', 'menu': 'Compares two "PHP-standardized" version number strings', 'kind': '[f]', 'abbr': 'version_compare()'}, {'word': 'ftok', 'menu': 'Convert a pathname and a project identifier to a System V IPC key', 'kind': '[f]', 'abbr': 'ftok()'}, {'word': 'str_rot13', 'menu': 'Perform the rot13 transform on a string', 'kind': '[f]', 'abbr': 'str_rot13()'}, {'word': 'stream_get_filters', 'menu': 'Retrieve list of registered filters', 'kind': '[f]', 'abbr': 'stream_get_filters()'}, {'word': 'stream_filter_register', 'menu': 'Register a user defined stream filter', 'kind': '[f]', 'abbr': 'stream_filter_register()'}, {'word': 'stream_bucket_make_writeable', 'menu': 'Return a bucket object from the brigade for operating on', 'kind': '[f]', 'abbr': 'stream_bucket_make_writeable()'}, {'word': 'stream_bucket_prepend', 'menu': 'Prepend bucket to brigade', 'kind': '[f]', 'abbr': 'stream_bucket_prepend()'}, {'word': 'stream_bucket_append', 'menu': 'Append bucket to brigade', 'kind': '[f]', 'abbr': 'stream_bucket_append()'}, {'word': 'stream_bucket_new', 'menu': 'Create a new bucket for use on the current stream', 'kind': '[f]', 'abbr': 'stream_bucket_new()'}, {'word': 'output_add_rewrite_var', 'menu': 'Add URL rewriter values', 'kind': '[f]', 'abbr': 'output_add_rewrite_var()'}, {'word': 'output_reset_rewrite_vars', 'menu': 'Reset URL rewriter values', 'kind': '[f]', 'abbr': 'output_reset_rewrite_vars()'}, {'word': 'sys_get_temp_dir', 'menu': 'Returns directory path used for temporary files', 'kind': '[f]', 'abbr': 'sys_get_temp_dir()'}, {'word': 'msg_get_queue', 'menu': 'Create or attach to a message queue', 'kind': '[f]', 'abbr': 'msg_get_queue()'}, {'word': 'msg_send', 'menu': 'Send a message to a message queue', 'kind': '[f]', 'abbr': 'msg_send()'}, {'word': 'msg_receive', 'menu': 'Receive a message from a message queue', 'kind': '[f]', 'abbr': 'msg_receive()'}, {'word': 'msg_remove_queue', 'menu': 'Destroy a message queue', 'kind': '[f]', 'abbr': 'msg_remove_queue()'}, {'word': 'msg_stat_queue', 'menu': 'Returns information from the message queue data structure', 'kind': '[f]', 'abbr': 'msg_stat_queue()'}, {'word': 'msg_set_queue', 'menu': 'Set information in the message queue data structure', 'kind': '[f]', 'abbr': 'msg_set_queue()'}, {'word': 'msg_queue_exists', 'menu': 'Check whether a message queue exists', 'kind': '[f]', 'abbr': 'msg_queue_exists()'}, {'word': 'sem_get', 'menu': 'Get a semaphore id', 'kind': '[f]', 'abbr': 'sem_get()'}, {'word': 'sem_acquire', 'menu': 'Acquire a semaphore', 'kind': '[f]', 'abbr': 'sem_acquire()'}, {'word': 'sem_release', 'menu': 'Release a semaphore', 'kind': '[f]', 'abbr': 'sem_release()'}, {'word': 'sem_remove', 'menu': 'Remove a semaphore', 'kind': '[f]', 'abbr': 'sem_remove()'}, {'word': 'shm_attach', 'menu': 'Creates or open a shared memory segment', 'kind': '[f]', 'abbr': 'shm_attach()'}, {'word': 'shm_remove', 'menu': 'Removes shared memory from Unix systems', 'kind': '[f]', 'abbr': 'shm_remove()'}, {'word': 'shm_detach', 'menu': 'Disconnects from shared memory segment', 'kind': '[f]', 'abbr': 'shm_detach()'}, {'word': 'shm_put_var', 'menu': 'Inserts or updates a variable in shared memory', 'kind': '[f]', 'abbr': 'shm_put_var()'}, {'word': 'shm_has_var', 'menu': 'Check whether a specific entry exists', 'kind': '[f]', 'abbr': 'shm_has_var()'}, {'word': 'shm_get_var', 'menu': 'Returns a variable from shared memory', 'kind': '[f]', 'abbr': 'shm_get_var()'}, {'word': 'shm_remove_var', 'menu': 'Removes a variable from shared memory', 'kind': '[f]', 'abbr': 'shm_remove_var()'}, {'word': 'token_get_all', 'menu': 'Split given source into PHP tokens', 'kind': '[f]', 'abbr': 'token_get_all()'}, {'word': 'token_name', 'menu': 'Get the symbolic name of a given PHP token', 'kind': '[f]', 'abbr': 'token_name()'}, {'word': 'wddx_serialize_value', 'menu': 'Serialize a single value into a WDDX packet', 'kind': '[f]', 'abbr': 'wddx_serialize_value()'}, {'word': 'wddx_serialize_vars', 'menu': 'Serialize variables into a WDDX packet', 'kind': '[f]', 'abbr': 'wddx_serialize_vars()'}, {'word': 'wddx_packet_start', 'menu': 'Starts a new WDDX packet with structure inside it', 'kind': '[f]', 'abbr': 'wddx_packet_start()'}, {'word': 'wddx_packet_end', 'menu': 'Ends a WDDX packet with the specified ID', 'kind': '[f]', 'abbr': 'wddx_packet_end()'}, {'word': 'wddx_add_vars', 'menu': 'Add variables to a WDDX packet with the specified ID', 'kind': '[f]', 'abbr': 'wddx_add_vars()'}, {'word': 'wddx_deserialize', 'menu': 'Unserializes a WDDX packet', 'kind': '[f]', 'abbr': 'wddx_deserialize()'}, {'word': 'xml_parser_create', 'menu': 'Create an XML parser', 'kind': '[f]', 'abbr': 'xml_parser_create()'}, {'word': 'xml_parser_create_ns', 'menu': 'Create an XML parser with namespace support', 'kind': '[f]', 'abbr': 'xml_parser_create_ns()'}, {'word': 'xml_set_object', 'menu': 'Use XML Parser within an object', 'kind': '[f]', 'abbr': 'xml_set_object()'}, {'word': 'xml_set_element_handler', 'menu': 'Set up start and end element handlers', 'kind': '[f]', 'abbr': 'xml_set_element_handler()'}, {'word': 'xml_set_character_data_handler', 'menu': 'Set up character data handler', 'kind': '[f]', 'abbr': 'xml_set_character_data_handler()'}, {'word': 'xml_set_processing_instruction_handler', 'menu': 'Set up processing instruction (PI) handler', 'kind': '[f]', 'abbr': 'xml_set_processing_instruction_handler()'}, {'word': 'xml_set_default_handler', 'menu': 'Set up default handler', 'kind': '[f]', 'abbr': 'xml_set_default_handler()'}, {'word': 'xml_set_unparsed_entity_decl_handler', 'menu': 'Set up unparsed entity declaration handler', 'kind': '[f]', 'abbr': 'xml_set_unparsed_entity_decl_handler()'}, {'word': 'xml_set_notation_decl_handler', 'menu': 'Set up notation declaration handler', 'kind': '[f]', 'abbr': 'xml_set_notation_decl_handler()'}, {'word': 'xml_set_external_entity_ref_handler', 'menu': 'Set up external entity reference handler', 'kind': '[f]', 'abbr': 'xml_set_external_entity_ref_handler()'}, {'word': 'xml_set_start_namespace_decl_handler', 'menu': 'Set up start namespace declaration handler', 'kind': '[f]', 'abbr': 'xml_set_start_namespace_decl_handler()'}, {'word': 'xml_set_end_namespace_decl_handler', 'menu': 'Set up end namespace declaration handler', 'kind': '[f]', 'abbr': 'xml_set_end_namespace_decl_handler()'}, {'word': 'xml_parse', 'menu': 'Start parsing an XML document', 'kind': '[f]', 'abbr': 'xml_parse()'}, {'word': 'xml_parse_into_struct', 'menu': 'Parse XML data into an array structure', 'kind': '[f]', 'abbr': 'xml_parse_into_struct()'}, {'word': 'xml_get_error_code', 'menu': 'Get XML parser error code', 'kind': '[f]', 'abbr': 'xml_get_error_code()'}, {'word': 'xml_error_string', 'menu': 'Get XML parser error string', 'kind': '[f]', 'abbr': 'xml_error_string()'}, {'word': 'xml_get_current_line_number', 'menu': 'Get current line number for an XML parser', 'kind': '[f]', 'abbr': 'xml_get_current_line_number()'}, {'word': 'xml_get_current_column_number', 'menu': 'Get current column number for an XML parser', 'kind': '[f]', 'abbr': 'xml_get_current_column_number()'}, {'word': 'xml_get_current_byte_index', 'menu': 'Get current byte index for an XML parser', 'kind': '[f]', 'abbr': 'xml_get_current_byte_index()'}, {'word': 'xml_parser_free', 'menu': 'Free an XML parser', 'kind': '[f]', 'abbr': 'xml_parser_free()'}, {'word': 'xml_parser_set_option', 'menu': 'Set options in an XML parser', 'kind': '[f]', 'abbr': 'xml_parser_set_option()'}, {'word': 'xml_parser_get_option', 'menu': 'Get options from an XML parser', 'kind': '[f]', 'abbr': 'xml_parser_get_option()'}, {'word': 'utf8_encode', 'menu': 'Encodes an ISO-8859-1 string to UTF-8', 'kind': '[f]', 'abbr': 'utf8_encode()'}, {'word': 'utf8_decode', 'menu': 'Converts a string with ISO-8859-1 characters encoded with UTF-8   to single-byte ISO-8859-1', 'kind': '[f]', 'abbr': 'utf8_decode()'}, {'word': 'xmlrpc_encode', 'menu': 'Generates XML for a PHP value', 'kind': '[f]', 'abbr': 'xmlrpc_encode()'}, {'word': 'xmlrpc_decode', 'menu': 'Decodes XML into native PHP types', 'kind': '[f]', 'abbr': 'xmlrpc_decode()'}, {'word': 'xmlrpc_decode_request', 'menu': 'Decodes XML into native PHP types', 'kind': '[f]', 'abbr': 'xmlrpc_decode_request()'}, {'word': 'xmlrpc_encode_request', 'menu': 'Generates XML for a method request', 'kind': '[f]', 'abbr': 'xmlrpc_encode_request()'}, {'word': 'xmlrpc_get_type', 'menu': 'Gets xmlrpc type for a PHP value', 'kind': '[f]', 'abbr': 'xmlrpc_get_type()'}, {'word': 'xmlrpc_set_type', 'menu': 'Sets xmlrpc type, base64 or datetime, for a PHP string value', 'kind': '[f]', 'abbr': 'xmlrpc_set_type()'}, {'word': 'xmlrpc_is_fault', 'menu': 'Determines if an array value represents an XMLRPC fault', 'kind': '[f]', 'abbr': 'xmlrpc_is_fault()'}, {'word': 'xmlrpc_server_create', 'menu': 'Creates an xmlrpc server', 'kind': '[f]', 'abbr': 'xmlrpc_server_create()'}, {'word': 'xmlrpc_server_destroy', 'menu': 'Destroys server resources', 'kind': '[f]', 'abbr': 'xmlrpc_server_destroy()'}, {'word': 'xmlrpc_server_register_method', 'menu': 'Register a PHP function to resource method matching method_name', 'kind': '[f]', 'abbr': 'xmlrpc_server_register_method()'}, {'word': 'xmlrpc_server_call_method', 'menu': 'Parses XML requests and call methods', 'kind': '[f]', 'abbr': 'xmlrpc_server_call_method()'}, {'word': 'xmlrpc_parse_method_descriptions', 'menu': 'Decodes XML into a list of method descriptions', 'kind': '[f]', 'abbr': 'xmlrpc_parse_method_descriptions()'}, {'word': 'xmlrpc_server_add_introspection_data', 'menu': 'Adds introspection documentation', 'kind': '[f]', 'abbr': 'xmlrpc_server_add_introspection_data()'}, {'word': 'xmlrpc_server_register_introspection_callback', 'menu': 'Register a PHP function to generate documentation', 'kind': '[f]', 'abbr': 'xmlrpc_server_register_introspection_callback()'}, {'word': 'xmlwriter_open_uri', 'menu': 'Create new xmlwriter using source uri for output', 'kind': '[f]', 'abbr': 'xmlwriter_open_uri()'}, {'word': 'xmlwriter_open_memory', 'menu': 'Create new xmlwriter using memory for string output', 'kind': '[f]', 'abbr': 'xmlwriter_open_memory()'}, {'word': 'xmlwriter_set_indent', 'menu': 'Toggle indentation on/off', 'kind': '[f]', 'abbr': 'xmlwriter_set_indent()'}, {'word': 'xmlwriter_set_indent_string', 'menu': 'Set string used for indenting', 'kind': '[f]', 'abbr': 'xmlwriter_set_indent_string()'}, {'word': 'xmlwriter_start_comment', 'menu': 'Create start comment', 'kind': '[f]', 'abbr': 'xmlwriter_start_comment()'}, {'word': 'xmlwriter_end_comment', 'menu': 'Create end comment', 'kind': '[f]', 'abbr': 'xmlwriter_end_comment()'}, {'word': 'xmlwriter_start_attribute', 'menu': 'Create start attribute', 'kind': '[f]', 'abbr': 'xmlwriter_start_attribute()'}, {'word': 'xmlwriter_end_attribute', 'menu': 'End attribute', 'kind': '[f]', 'abbr': 'xmlwriter_end_attribute()'}, {'word': 'xmlwriter_write_attribute', 'menu': 'Write full attribute', 'kind': '[f]', 'abbr': 'xmlwriter_write_attribute()'}, {'word': 'xmlwriter_start_attribute_ns', 'menu': 'Create start namespaced attribute', 'kind': '[f]', 'abbr': 'xmlwriter_start_attribute_ns()'}, {'word': 'xmlwriter_write_attribute_ns', 'menu': 'Write full namespaced attribute', 'kind': '[f]', 'abbr': 'xmlwriter_write_attribute_ns()'}, {'word': 'xmlwriter_start_element', 'menu': 'Create start element tag', 'kind': '[f]', 'abbr': 'xmlwriter_start_element()'}, {'word': 'xmlwriter_end_element', 'menu': 'End current element', 'kind': '[f]', 'abbr': 'xmlwriter_end_element()'}, {'word': 'xmlwriter_full_end_element', 'menu': 'End current element', 'kind': '[f]', 'abbr': 'xmlwriter_full_end_element()'}, {'word': 'xmlwriter_start_element_ns', 'menu': 'Create start namespaced element tag', 'kind': '[f]', 'abbr': 'xmlwriter_start_element_ns()'}, {'word': 'xmlwriter_write_element', 'menu': 'Write full element tag', 'kind': '[f]', 'abbr': 'xmlwriter_write_element()'}, {'word': 'xmlwriter_write_element_ns', 'menu': 'Write full namespaced element tag', 'kind': '[f]', 'abbr': 'xmlwriter_write_element_ns()'}, {'word': 'xmlwriter_start_pi', 'menu': 'Create start PI tag', 'kind': '[f]', 'abbr': 'xmlwriter_start_pi()'}, {'word': 'xmlwriter_end_pi', 'menu': 'End current PI', 'kind': '[f]', 'abbr': 'xmlwriter_end_pi()'}, {'word': 'xmlwriter_write_pi', 'menu': 'Writes a PI', 'kind': '[f]', 'abbr': 'xmlwriter_write_pi()'}, {'word': 'xmlwriter_start_cdata', 'menu': 'Create start CDATA tag', 'kind': '[f]', 'abbr': 'xmlwriter_start_cdata()'}, {'word': 'xmlwriter_end_cdata', 'menu': 'End current CDATA', 'kind': '[f]', 'abbr': 'xmlwriter_end_cdata()'}, {'word': 'xmlwriter_write_cdata', 'menu': 'Write full CDATA tag', 'kind': '[f]', 'abbr': 'xmlwriter_write_cdata()'}, {'word': 'xmlwriter_text', 'menu': 'Write text', 'kind': '[f]', 'abbr': 'xmlwriter_text()'}, {'word': 'xmlwriter_write_raw', 'menu': 'Write a raw XML text', 'kind': '[f]', 'abbr': 'xmlwriter_write_raw()'}, {'word': 'xmlwriter_start_document', 'menu': 'Create document tag', 'kind': '[f]', 'abbr': 'xmlwriter_start_document()'}, {'word': 'xmlwriter_end_document', 'menu': 'End current document', 'kind': '[f]', 'abbr': 'xmlwriter_end_document()'}, {'word': 'xmlwriter_write_comment', 'menu': 'Write full comment tag', 'kind': '[f]', 'abbr': 'xmlwriter_write_comment()'}, {'word': 'xmlwriter_start_dtd', 'menu': 'Create start DTD tag', 'kind': '[f]', 'abbr': 'xmlwriter_start_dtd()'}, {'word': 'xmlwriter_end_dtd', 'menu': 'End current DTD', 'kind': '[f]', 'abbr': 'xmlwriter_end_dtd()'}, {'word': 'xmlwriter_write_dtd', 'menu': 'Write full DTD tag', 'kind': '[f]', 'abbr': 'xmlwriter_write_dtd()'}, {'word': 'xmlwriter_start_dtd_element', 'menu': 'Create start DTD element', 'kind': '[f]', 'abbr': 'xmlwriter_start_dtd_element()'}, {'word': 'xmlwriter_end_dtd_element', 'menu': 'End current DTD element', 'kind': '[f]', 'abbr': 'xmlwriter_end_dtd_element()'}, {'word': 'xmlwriter_write_dtd_element', 'menu': 'Write full DTD element tag', 'kind': '[f]', 'abbr': 'xmlwriter_write_dtd_element()'}, {'word': 'xmlwriter_start_dtd_attlist', 'menu': 'Create start DTD AttList', 'kind': '[f]', 'abbr': 'xmlwriter_start_dtd_attlist()'}, {'word': 'xmlwriter_end_dtd_attlist', 'menu': 'End current DTD AttList', 'kind': '[f]', 'abbr': 'xmlwriter_end_dtd_attlist()'}, {'word': 'xmlwriter_write_dtd_attlist', 'menu': 'Write full DTD AttList tag', 'kind': '[f]', 'abbr': 'xmlwriter_write_dtd_attlist()'}, {'word': 'xmlwriter_start_dtd_entity', 'menu': 'Create start DTD Entity', 'kind': '[f]', 'abbr': 'xmlwriter_start_dtd_entity()'}, {'word': 'xmlwriter_end_dtd_entity', 'menu': 'End current DTD Entity', 'kind': '[f]', 'abbr': 'xmlwriter_end_dtd_entity()'}, {'word': 'xmlwriter_write_dtd_entity', 'menu': 'Write full DTD Entity tag', 'kind': '[f]', 'abbr': 'xmlwriter_write_dtd_entity()'}, {'word': 'xmlwriter_output_memory', 'menu': 'Returns current buffer', 'kind': '[f]', 'abbr': 'xmlwriter_output_memory()'}, {'word': 'xmlwriter_flush', 'menu': 'Flush current buffer', 'kind': '[f]', 'abbr': 'xmlwriter_flush()'}, {'word': 'zip_open', 'menu': 'Open a ZIP file archive', 'kind': '[f]', 'abbr': 'zip_open()'}, {'word': 'zip_close', 'menu': 'Close a ZIP file archive', 'kind': '[f]', 'abbr': 'zip_close()'}, {'word': 'zip_read', 'menu': 'Read next entry in a ZIP file archive', 'kind': '[f]', 'abbr': 'zip_read()'}, {'word': 'zip_entry_open', 'menu': 'Open a directory entry for reading', 'kind': '[f]', 'abbr': 'zip_entry_open()'}, {'word': 'zip_entry_close', 'menu': 'Close a directory entry', 'kind': '[f]', 'abbr': 'zip_entry_close()'}, {'word': 'zip_entry_read', 'menu': 'Read from an open directory entry', 'kind': '[f]', 'abbr': 'zip_entry_read()'}, {'word': 'zip_entry_filesize', 'menu': 'Retrieve the actual file size of a directory entry', 'kind': '[f]', 'abbr': 'zip_entry_filesize()'}, {'word': 'zip_entry_name', 'menu': 'Retrieve the name of a directory entry', 'kind': '[f]', 'abbr': 'zip_entry_name()'}, {'word': 'zip_entry_compressedsize', 'menu': 'Retrieve the compressed size of a directory entry', 'kind': '[f]', 'abbr': 'zip_entry_compressedsize()'}, {'word': 'zip_entry_compressionmethod', 'menu': 'Retrieve the compression method of a directory entry', 'kind': '[f]', 'abbr': 'zip_entry_compressionmethod()'}, {'word': 'dl', 'menu': 'Loads a PHP extension at runtime', 'kind': '[f]', 'abbr': 'dl()'}, {'word': 'cli_set_process_title', 'menu': 'Sets the process title', 'kind': '[f]', 'abbr': 'cli_set_process_title()'}, {'word': 'cli_get_process_title', 'menu': 'Returns the current process title', 'kind': '[f]', 'abbr': 'cli_get_process_title()'}]
